var Lib =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/awaitqueue/index.js":
/*!******************************************!*\
  !*** ./node_modules/awaitqueue/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class AwaitQueue\n{\n\tconstructor({ ClosedErrorClass = Error } = {})\n\t{\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// Queue of pending tasks. Each task is a function that returns a promise\n\t\t// or a value directly.\n\t\t// @type {Array<Function>}\n\t\tthis._tasks = [];\n\n\t\t// Error used when rejecting a task after the AwaitQueue has been closed.\n\t\t// @type {Error}\n\t\tthis._closedErrorClass = ClosedErrorClass;\n\t}\n\n\tclose()\n\t{\n\t\tthis._closed = true;\n\t}\n\n\t/**\n\t * @param {Function} task - Function that returns a promise or a value directly.\n\t *\n\t * @async\n\t */\n\tasync push(task)\n\t{\n\t\tif (typeof task !== 'function')\n\t\t\tthrow new TypeError('given task is not a function');\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\ttask._resolve = resolve;\n\t\t\ttask._reject = reject;\n\n\t\t\t// Append task to the queue.\n\t\t\tthis._tasks.push(task);\n\n\t\t\t// And run it if the only task in the queue is the new one.\n\t\t\tif (this._tasks.length === 1)\n\t\t\t\tthis._next();\n\t\t});\n\t}\n\n\tasync _next()\n\t{\n\t\t// Take the first task.\n\t\tconst task = this._tasks[0];\n\n\t\tif (!task)\n\t\t\treturn;\n\n\t\t// Execute it.\n\t\tawait this._runTask(task);\n\n\t\t// Remove the first task (the completed one) from the queue.\n\t\tthis._tasks.shift();\n\n\t\t// And continue.\n\t\tthis._next();\n\t}\n\n\tasync _runTask(task)\n\t{\n\t\tif (this._closed)\n\t\t{\n\t\t\ttask._reject(new this._closedErrorClass('AwaitQueue closed'));\n\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tconst result = await task();\n\n\t\t\tif (this._closed)\n\t\t\t{\n\t\t\t\ttask._reject(new this._closedErrorClass('AwaitQueue closed'));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Resolve the task with the given result (if any).\n\t\t\ttask._resolve(result);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t{\n\t\t\t\ttask._reject(new this._closedErrorClass('AwaitQueue closed'));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Reject the task with the error.\n\t\t\ttask._reject(error);\n\t\t}\n\t}\n}\n\nmodule.exports = AwaitQueue;\n\n\n//# sourceURL=webpack://Lib/./node_modules/awaitqueue/index.js?");

/***/ }),

/***/ "./node_modules/bowser/es5.js":
/*!************************************!*\
  !*** ./node_modules/bowser/es5.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t():undefined}(this,function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map(function(e){return parseInt(e,10)||0});if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),function(e){return new Array(20-e.length).join(\"0\")+e}).reverse()});for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw new Error(\"Browser's test function is not valid\")});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw new Error(\"Browser's test function is not valid\")});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw new Error(\"Browser's test function is not valid\")});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw new Error(\"Browser's test function is not valid\")});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach(function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)}),i>0){var o=Object.keys(r),a=o.find(function(e){return t.isOS(e)});if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find(function(e){return t.isPlatform(e)});if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find(function(e){return t.isBrowser(e,!0)});if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some(function(e){return t.is(e)})},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s\\/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s\\/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s\\/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s\\/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s\\/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.MacOS,version:t}}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s\\/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[\\/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})});\n\n//# sourceURL=webpack://Lib/./node_modules/bowser/es5.js?");

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\nfunction log(...args) {\n\t// This hackery is required for IE8/9, where\n\t// the `console.log` function doesn't have 'apply'\n\treturn typeof console === 'object' &&\n\t\tconsole.log &&\n\t\tconsole.log(...args);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://Lib/./node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://Lib/./node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = $getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  var args = [];\n  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    ReflectApply(this.listener, this.target, args);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function') {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n//# sourceURL=webpack://Lib/./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/h264-profile-level-id/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/h264-profile-level-id/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\")('h264-profile-level-id');\n\n/* eslint-disable no-console */\ndebug.log = console.info.bind(console);\n/* eslint-enable no-console */\n\nconst ProfileConstrainedBaseline = 1;\nconst ProfileBaseline = 2;\nconst ProfileMain = 3;\nconst ProfileConstrainedHigh = 4;\nconst ProfileHigh = 5;\n\nexports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;\nexports.ProfileBaseline = ProfileBaseline;\nexports.ProfileMain = ProfileMain;\nexports.ProfileConstrainedHigh = ProfileConstrainedHigh;\nexports.ProfileHigh = ProfileHigh;\n\n// All values are equal to ten times the level number, except level 1b which is\n// special.\nconst Level1_b = 0;\nconst Level1 = 10;\nconst Level1_1 = 11;\nconst Level1_2 = 12;\nconst Level1_3 = 13;\nconst Level2 = 20;\nconst Level2_1 = 21;\nconst Level2_2 = 22;\nconst Level3 = 30;\nconst Level3_1 = 31;\nconst Level3_2 = 32;\nconst Level4 = 40;\nconst Level4_1 = 41;\nconst Level4_2 = 42;\nconst Level5 = 50;\nconst Level5_1 = 51;\nconst Level5_2 = 52;\n\nexports.Level1_b = Level1_b;\nexports.Level1 = Level1;\nexports.Level1_1 = Level1_1;\nexports.Level1_2 = Level1_2;\nexports.Level1_3 = Level1_3;\nexports.Level2 = Level2;\nexports.Level2_1 = Level2_1;\nexports.Level2_2 = Level2_2;\nexports.Level3 = Level3;\nexports.Level3_1 = Level3_1;\nexports.Level3_2 = Level3_2;\nexports.Level4 = Level4;\nexports.Level4_1 = Level4_1;\nexports.Level4_2 = Level4_2;\nexports.Level5 = Level5;\nexports.Level5_1 = Level5_1;\nexports.Level5_2 = Level5_2;\n\nclass ProfileLevelId\n{\n\tconstructor(profile, level)\n\t{\n\t\tthis.profile = profile;\n\t\tthis.level = level;\n\t}\n}\n\nexports.ProfileLevelId = ProfileLevelId;\n\n// Default ProfileLevelId.\n//\n// TODO: The default should really be profile Baseline and level 1 according to\n// the spec: https://tools.ietf.org/html/rfc6184#section-8.1. In order to not\n// break backwards compatibility with older versions of WebRTC where external\n// codecs don't have any parameters, use profile ConstrainedBaseline level 3_1\n// instead. This workaround will only be done in an interim period to allow\n// external clients to update their code.\n//\n// http://crbug/webrtc/6337.\nconst DefaultProfileLevelId =\n\tnew ProfileLevelId(ProfileConstrainedBaseline, Level3_1);\n\n// For level_idc=11 and profile_idc=0x42, 0x4D, or 0x58, the constraint set3\n// flag specifies if level 1b or level 1.1 is used.\nconst ConstraintSet3Flag = 0x10;\n\n// Class for matching bit patterns such as \"x1xx0000\" where 'x' is allowed to be\n// either 0 or 1.\nclass BitPattern\n{\n\tconstructor(str)\n\t{\n\t\tthis._mask = ~byteMaskString('x', str);\n\t\tthis._maskedValue = byteMaskString('1', str);\n\t}\n\n\tisMatch(value)\n\t{\n\t\treturn this._maskedValue === (value & this._mask);\n\t}\n}\n\n// Class for converting between profile_idc/profile_iop to Profile.\nclass ProfilePattern\n{\n\tconstructor(profile_idc, profile_iop, profile)\n\t{\n\t\tthis.profile_idc = profile_idc;\n\t\tthis.profile_iop = profile_iop;\n\t\tthis.profile = profile;\n\t}\n}\n\n// This is from https://tools.ietf.org/html/rfc6184#section-8.1.\nconst ProfilePatterns =\n[\n\tnew ProfilePattern(0x42, new BitPattern('x1xx0000'), ProfileConstrainedBaseline),\n\tnew ProfilePattern(0x4D, new BitPattern('1xxx0000'), ProfileConstrainedBaseline),\n\tnew ProfilePattern(0x58, new BitPattern('11xx0000'), ProfileConstrainedBaseline),\n\tnew ProfilePattern(0x42, new BitPattern('x0xx0000'), ProfileBaseline),\n\tnew ProfilePattern(0x58, new BitPattern('10xx0000'), ProfileBaseline),\n\tnew ProfilePattern(0x4D, new BitPattern('0x0x0000'), ProfileMain),\n\tnew ProfilePattern(0x64, new BitPattern('00000000'), ProfileHigh),\n\tnew ProfilePattern(0x64, new BitPattern('00001100'), ProfileConstrainedHigh)\n];\n\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes.\n * Nothing will be returned if the string is not a recognized H264 profile\n * level id.\n *\n * @param {String} str - profile-level-id value as a string of 3 hex bytes.\n *\n * @returns {ProfileLevelId}\n */\nexports.parseProfileLevelId = function(str)\n{\n\t// The string should consist of 3 bytes in hexadecimal format.\n\tif (typeof str !== 'string' || str.length !== 6)\n\t\treturn null;\n\n\tconst profile_level_id_numeric = parseInt(str, 16);\n\n\tif (profile_level_id_numeric === 0)\n\t\treturn null;\n\n\t// Separate into three bytes.\n\tconst level_idc = profile_level_id_numeric & 0xFF;\n\tconst profile_iop = (profile_level_id_numeric >> 8) & 0xFF;\n\tconst profile_idc = (profile_level_id_numeric >> 16) & 0xFF;\n\n\t// Parse level based on level_idc and constraint set 3 flag.\n\tlet level;\n\n\tswitch (level_idc)\n\t{\n\t\tcase Level1_1:\n\t\t{\n\t\t\tlevel = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;\n\t\t\tbreak;\n\t\t}\n\t\tcase Level1:\n\t\tcase Level1_2:\n\t\tcase Level1_3:\n\t\tcase Level2:\n\t\tcase Level2_1:\n\t\tcase Level2_2:\n\t\tcase Level3:\n\t\tcase Level3_1:\n\t\tcase Level3_2:\n\t\tcase Level4:\n\t\tcase Level4_1:\n\t\tcase Level4_2:\n\t\tcase Level5:\n\t\tcase Level5_1:\n\t\tcase Level5_2:\n\t\t{\n\t\t\tlevel = level_idc;\n\t\t\tbreak;\n\t\t}\n\t\t// Unrecognized level_idc.\n\t\tdefault:\n\t\t{\n\t\t\tdebug('parseProfileLevelId() | unrecognized level_idc:%s', level_idc);\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Parse profile_idc/profile_iop into a Profile enum.\n\tfor (const pattern of ProfilePatterns)\n\t{\n\t\tif (\n\t\t\tprofile_idc === pattern.profile_idc &&\n\t\t\tpattern.profile_iop.isMatch(profile_iop)\n\t\t)\n\t\t{\n\t\t\treturn new ProfileLevelId(pattern.profile, level);\n\t\t}\n\t}\n\n\tdebug('parseProfileLevelId() | unrecognized profile_idc/profile_iop combination');\n\n\treturn null;\n};\n\n/**\n * Returns canonical string representation as three hex bytes of the profile\n * level id, or returns nothing for invalid profile level ids.\n *\n * @param {ProfileLevelId} profile_level_id\n *\n * @returns {String}\n */\nexports.profileLevelIdToString = function(profile_level_id)\n{\n\t// Handle special case level == 1b.\n\tif (profile_level_id.level == Level1_b)\n\t{\n\t\tswitch (profile_level_id.profile)\n\t\t{\n\t\t\tcase ProfileConstrainedBaseline:\n\t\t\t{\n\t\t\t\treturn '42f00b';\n\t\t\t}\n\t\t\tcase ProfileBaseline:\n\t\t\t{\n\t\t\t\treturn '42100b';\n\t\t\t}\n\t\t\tcase ProfileMain:\n\t\t\t{\n\t\t\t\treturn '4d100b';\n\t\t\t}\n\t\t\t// Level 1_b is not allowed for other profiles.\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tdebug(\n\t\t\t\t\t'profileLevelIdToString() | Level 1_b not is allowed for profile:%s',\n\t\t\t\t\tprofile_level_id.profile);\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet profile_idc_iop_string;\n\n\tswitch (profile_level_id.profile)\n\t{\n\t\tcase ProfileConstrainedBaseline:\n\t\t{\n\t\t\tprofile_idc_iop_string = '42e0';\n\t\t\tbreak;\n\t\t}\n\t\tcase ProfileBaseline:\n\t\t{\n\t\t\tprofile_idc_iop_string = '4200';\n\t\t\tbreak;\n\t\t}\n\t\tcase ProfileMain:\n\t\t{\n\t\t\tprofile_idc_iop_string = '4d00';\n\t\t\tbreak;\n\t\t}\n\t\tcase ProfileConstrainedHigh:\n\t\t{\n\t\t\tprofile_idc_iop_string = '640c';\n\t\t\tbreak;\n\t\t}\n\t\tcase ProfileHigh:\n\t\t{\n\t\t\tprofile_idc_iop_string = '6400';\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t{\n\t\t\tdebug(\n\t\t\t\t'profileLevelIdToString() | unrecognized profile:%s',\n\t\t\t\tprofile_level_id.profile);\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tlet levelStr = (profile_level_id.level).toString(16);\n\n\tif (levelStr.length === 1)\n\t\tlevelStr = `0${levelStr}`;\n\n\treturn `${profile_idc_iop_string}${levelStr}`;\n};\n\n/**\n * Parse profile level id that is represented as a string of 3 hex bytes\n * contained in an SDP key-value map. A default profile level id will be\n * returned if the profile-level-id key is missing. Nothing will be returned if\n * the key is present but the string is invalid.\n *\n * @param {Object} [params={}] - Codec parameters object.\n *\n * @returns {ProfileLevelId}\n */\nexports.parseSdpProfileLevelId = function(params = {})\n{\n\tconst profile_level_id = params['profile-level-id'];\n\n\treturn !profile_level_id\n\t\t? DefaultProfileLevelId\n\t\t: exports.parseProfileLevelId(profile_level_id);\n};\n\n/**\n * Returns true if the parameters have the same H264 profile, i.e. the same\n * H264 profile (Baseline, High, etc).\n *\n * @param {Object} [params1={}] - Codec parameters object.\n * @param {Object} [params2={}] - Codec parameters object.\n *\n * @returns {Boolean}\n */\nexports.isSameProfile = function(params1 = {}, params2 = {})\n{\n\tconst profile_level_id_1 = exports.parseSdpProfileLevelId(params1);\n\tconst profile_level_id_2 = exports.parseSdpProfileLevelId(params2);\n\n\t// Compare H264 profiles, but not levels.\n\treturn Boolean(\n\t\tprofile_level_id_1 &&\n\t\tprofile_level_id_2 &&\n\t\tprofile_level_id_1.profile === profile_level_id_2.profile\n\t);\n};\n\n/**\n * Generate codec parameters that will be used as answer in an SDP negotiation\n * based on local supported parameters and remote offered parameters. Both\n * local_supported_params and remote_offered_params represent sendrecv media\n * descriptions, i.e they are a mix of both encode and decode capabilities. In\n * theory, when the profile in local_supported_params represent a strict superset\n * of the profile in remote_offered_params, we could limit the profile in the\n * answer to the profile in remote_offered_params.\n *\n * However, to simplify the code, each supported H264 profile should be listed\n * explicitly in the list of local supported codecs, even if they are redundant.\n * Then each local codec in the list should be tested one at a time against the\n * remote codec, and only when the profiles are equal should this function be\n * called. Therefore, this function does not need to handle profile intersection,\n * and the profile of local_supported_params and remote_offered_params must be\n * equal before calling this function. The parameters that are used when\n * negotiating are the level part of profile-level-id and level-asymmetry-allowed.\n *\n * @param {Object} [local_supported_params={}]\n * @param {Object} [remote_offered_params={}]\n *\n * @returns {String} Canonical string representation as three hex bytes of the\n *   profile level id, or null if no one of the params have profile-level-id.\n *\n * @throws {TypeError} If Profile mismatch or invalid params.\n */\nexports.generateProfileLevelIdForAnswer = function(\n\tlocal_supported_params = {},\n\tremote_offered_params = {}\n)\n{\n\t// If both local and remote params do not contain profile-level-id, they are\n\t// both using the default profile. In this case, don't return anything.\n\tif (\n\t\t!local_supported_params['profile-level-id'] &&\n\t\t!remote_offered_params['profile-level-id']\n\t)\n\t{\n\t\tdebug(\n\t\t\t'generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params');\n\n\t\treturn null;\n\t}\n\n\t// Parse profile-level-ids.\n\tconst local_profile_level_id =\n\t\texports.parseSdpProfileLevelId(local_supported_params);\n\tconst remote_profile_level_id =\n\t\texports.parseSdpProfileLevelId(remote_offered_params);\n\n\t// The local and remote codec must have valid and equal H264 Profiles.\n\tif (!local_profile_level_id)\n\t\tthrow new TypeError('invalid local_profile_level_id');\n\n\tif (!remote_profile_level_id)\n\t\tthrow new TypeError('invalid remote_profile_level_id');\n\n\tif (local_profile_level_id.profile !== remote_profile_level_id.profile)\n\t\tthrow new TypeError('H264 Profile mismatch');\n\n\t// Parse level information.\n\tconst level_asymmetry_allowed = (\n\t\tisLevelAsymmetryAllowed(local_supported_params) &&\n\t\tisLevelAsymmetryAllowed(remote_offered_params)\n\t);\n\n\tconst local_level = local_profile_level_id.level;\n\tconst remote_level = remote_profile_level_id.level;\n\tconst min_level = minLevel(local_level, remote_level);\n\n\t// Determine answer level. When level asymmetry is not allowed, level upgrade\n\t// is not allowed, i.e., the level in the answer must be equal to or lower\n\t// than the level in the offer.\n\tconst answer_level = level_asymmetry_allowed ? local_level : min_level;\n\n\tdebug(\n\t\t'generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]',\n\t\tlocal_profile_level_id.profile, answer_level);\n\n\t// Return the resulting profile-level-id for the answer parameters.\n\treturn exports.profileLevelIdToString(\n\t\tnew ProfileLevelId(local_profile_level_id.profile, answer_level));\n};\n\n// Convert a string of 8 characters into a byte where the positions containing\n// character c will have their bit set. For example, c = 'x', str = \"x1xx0000\"\n// will return 0b10110000.\nfunction byteMaskString(c, str)\n{\n\treturn (\n\t\t((str[0] === c) << 7) | ((str[1] === c) << 6) | ((str[2] === c) << 5) |\n\t\t((str[3] === c) << 4)\t| ((str[4] === c) << 3)\t| ((str[5] === c) << 2)\t|\n\t\t((str[6] === c) << 1)\t| ((str[7] === c) << 0)\n\t);\n}\n\n// Compare H264 levels and handle the level 1b case.\nfunction isLessLevel(a, b)\n{\n\tif (a === Level1_b)\n\t\treturn b !== Level1 && b !== Level1_b;\n\n\tif (b === Level1_b)\n\t\treturn a !== Level1;\n\n\treturn a < b;\n}\n\nfunction minLevel(a, b)\n{\n\treturn isLessLevel(a, b) ? a : b;\n}\n\nfunction isLevelAsymmetryAllowed(params = {})\n{\n\tconst level_asymmetry_allowed = params['level-asymmetry-allowed'];\n\n\treturn (\n\t\tlevel_asymmetry_allowed === 1 ||\n\t\tlevel_asymmetry_allowed === '1'\n\t);\n}\n\n\n//# sourceURL=webpack://Lib/./node_modules/h264-profile-level-id/index.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/Consumer.js":
/*!*******************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/Consumer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { InvalidStateError } = __webpack_require__(/*! ./errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\n\nconst logger = new Logger('Consumer');\n\nclass Consumer extends EnhancedEventEmitter\n{\n\t/**\n\t * @private\n\t *\n\t * @emits transportclose\n\t * @emits trackended\n\t * @emits @getstats\n\t * @emits @close\n\t */\n\tconstructor({ id, localId, producerId, track, rtpParameters, appData })\n\t{\n\t\tsuper(logger);\n\n\t\t// Id.\n\t\t// @type {String}\n\t\tthis._id = id;\n\n\t\t// Local id.\n\t\t// @type {String}\n\t\tthis._localId = localId;\n\n\t\t// Associated Producer id.\n\t\t// @type {String}\n\t\tthis._producerId = producerId;\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// Remote track.\n\t\t// @type {MediaStreamTrack}\n\t\tthis._track = track;\n\n\t\t// RTP parameters.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._rtpParameters = rtpParameters;\n\n\t\t// Paused flag.\n\t\t// @type {Boolean}\n\t\tthis._paused = !track.enabled;\n\n\t\t// App custom data.\n\t\t// @type {Object}\n\t\tthis._appData = appData;\n\n\t\tthis._onTrackEnded = this._onTrackEnded.bind(this);\n\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Consumer id.\n\t *\n\t * @returns {String}\n\t */\n\tget id()\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Local id.\n\t *\n\t * @private\n\t * @returns {String}\n\t */\n\tget localId()\n\t{\n\t\treturn this._localId;\n\t}\n\n\t/**\n\t * Associated Producer id.\n\t *\n\t * @returns {String}\n\t */\n\tget producerId()\n\t{\n\t\treturn this._producerId;\n\t}\n\n\t/**\n\t * Whether the Consumer is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Media kind.\n\t *\n\t * @returns {String}\n\t */\n\tget kind()\n\t{\n\t\treturn this._track.kind;\n\t}\n\n\t/**\n\t * The associated track.\n\t *\n\t * @returns {MediaStreamTrack}\n\t */\n\tget track()\n\t{\n\t\treturn this._track;\n\t}\n\n\t/**\n\t * RTP parameters.\n\t *\n\t * @returns {RTCRtpParameters}\n\t */\n\tget rtpParameters()\n\t{\n\t\treturn this._rtpParameters;\n\t}\n\n\t/**\n\t * Whether the Consumer is paused.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget paused()\n\t{\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget appData()\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Closes the Consumer.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.emit('@close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t *\n\t * @private\n\t */\n\ttransportClosed()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.safeEmit('transportclose');\n\t}\n\n\t/**\n\t * Get associated RTCRtpReceiver stats.\n\t *\n\t * @async\n\t * @returns {RTCStatsReport}\n\t * @throws {InvalidStateError} if Consumer closed.\n\t */\n\tasync getStats()\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this.safeEmitAsPromise('@getstats');\n\t}\n\n\t/**\n\t * Pauses receiving media.\n\t */\n\tpause()\n\t{\n\t\tlogger.debug('pause()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('pause() | Consumer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = true;\n\t\tthis._track.enabled = false;\n\t}\n\n\t/**\n\t * Resumes receiving media.\n\t */\n\tresume()\n\t{\n\t\tlogger.debug('resume()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('resume() | Consumer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = false;\n\t\tthis._track.enabled = true;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_onTrackEnded()\n\t{\n\t\tlogger.debug('track \"ended\" event');\n\n\t\tthis.safeEmit('trackended');\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTrack()\n\t{\n\t\tthis._track.addEventListener('ended', this._onTrackEnded);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_destroyTrack()\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis._track.removeEventListener('ended', this._onTrackEnded);\n\t\t\tthis._track.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{}\n\t}\n}\n\nmodule.exports = Consumer;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/Consumer.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/DataConsumer.js":
/*!***********************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/DataConsumer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\n\nconst logger = new Logger('DataConsumer');\n\nclass DataConsumer extends EnhancedEventEmitter\n{\n\t/**\n\t * @private\n\t *\n\t * @emits transportclose\n\t * @emits open\n\t * @emits {Object} error\n\t * @emits close\n\t * @emits {Any} message\n\t * @emits @close\n\t */\n\tconstructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData })\n\t{\n\t\tsuper(logger);\n\n\t\t// Id.\n\t\t// @type {String}\n\t\tthis._id = id;\n\n\t\t// Associated DataProducer Id.\n\t\t// @type {String}\n\t\tthis._dataProducerId = dataProducerId;\n\n\t\t// The underlying RTCDataChannel instance.\n\t\t// @type {RTCDataChannel}\n\t\tthis._dataChannel = dataChannel;\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// SCTP stream parameters.\n\t\t// @type {RTCSctpStreamParameters}\n\t\tthis._sctpStreamParameters = sctpStreamParameters;\n\n\t\t// App custom data.\n\t\t// @type {Object}\n\t\tthis._appData = appData;\n\n\t\tthis._handleDataChannel();\n\t}\n\n\t/**\n\t * DataConsumer id.\n\t *\n\t * @returns {String}\n\t */\n\tget id()\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Associated DataProducer id.\n\t *\n\t * @returns {String}\n\t */\n\tget dataProducerId()\n\t{\n\t\treturn this._dataProducerId;\n\t}\n\n\t/**\n\t * Whether the DataConsumer is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * SCTP stream parameters.\n\t *\n\t * @returns {RTCSctpStreamParameters}\n\t */\n\tget sctpStreamParameters()\n\t{\n\t\treturn this._sctpStreamParameters;\n\t}\n\n\t/**\n\t * DataChannel readyState.\n\t *\n\t * @returns {String}\n\t */\n\tget readyState()\n\t{\n\t\treturn this._dataChannel.readyState;\n\t}\n\n\t/**\n\t * DataChannel label.\n\t *\n\t * @returns {String}\n\t */\n\tget label()\n\t{\n\t\treturn this._dataChannel.label;\n\t}\n\n\t/**\n\t * DataChannel protocol.\n\t *\n\t * @returns {String}\n\t */\n\tget protocol()\n\t{\n\t\treturn this._dataChannel.protocol;\n\t}\n\n\t/**\n\t * DataChannel binaryType.\n\t *\n\t * @returns {String}\n\t */\n\tget binaryType()\n\t{\n\t\treturn this._dataChannel.binaryType;\n\t}\n\n\t/**\n\t * Set DataChannel binaryType.\n\t *\n\t * @param {Number} binaryType\n\t */\n\tset binaryType(binaryType)\n\t{\n\t\tthis._dataChannel.binaryType = binaryType;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget appData()\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Closes the DataConsumer.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.emit('@close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t *\n\t * @private\n\t */\n\ttransportClosed()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.safeEmit('transportclose');\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleDataChannel()\n\t{\n\t\tthis._dataChannel.addEventListener('open', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('DataChannel \"open\" event');\n\n\t\t\tthis.safeEmit('open');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('error', (event) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlet { error } = event;\n\n\t\t\tif (!error)\n\t\t\t\terror = new Error('unknown DataChannel error');\n\n\t\t\tif (error.errorDetail === 'sctp-failure')\n\t\t\t{\n\t\t\t\tlogger.error(\n\t\t\t\t\t'DataChannel SCTP error [sctpCauseCode:%s]: %s',\n\t\t\t\t\terror.sctpCauseCode, error.message);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlogger.error('DataChannel \"error\" event: %o', error);\n\t\t\t}\n\n\t\t\tthis.safeEmit('error', error);\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('close', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.warn('DataChannel \"close\" event');\n\n\t\t\tthis._closed = true;\n\n\t\t\tthis.emit('@close');\n\t\t\tthis.safeEmit('close');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('message', (event) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis.safeEmit('message', event.data);\n\t\t});\n\t}\n}\n\nmodule.exports = DataConsumer;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/DataConsumer.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/DataProducer.js":
/*!***********************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/DataProducer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { InvalidStateError } = __webpack_require__(/*! ./errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\n\nconst logger = new Logger('DataProducer');\n\nclass DataProducer extends EnhancedEventEmitter\n{\n\t/**\n\t * @private\n\t *\n\t * @emits transportclose\n\t * @emits open\n\t * @emits {Object} error\n\t * @emits close\n\t * @emits bufferedamountlow\n\t * @emits @close\n\t */\n\tconstructor({ id, dataChannel, sctpStreamParameters, appData })\n\t{\n\t\tsuper(logger);\n\n\t\t// Id.\n\t\t// @type {String}\n\t\tthis._id = id;\n\n\t\t// The underlying RTCDataChannel instance.\n\t\t// @type {RTCDataChannel}\n\t\tthis._dataChannel = dataChannel;\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// SCTP stream parameters.\n\t\t// @type {RTCSctpStreamParameters}\n\t\tthis._sctpStreamParameters = sctpStreamParameters;\n\n\t\t// App custom data.\n\t\t// @type {Object}\n\t\tthis._appData = appData;\n\n\t\tthis._handleDataChannel();\n\t}\n\n\t/**\n\t * DataProducer id.\n\t *\n\t * @returns {String}\n\t */\n\tget id()\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Whether the DataProducer is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * SCTP stream parameters.\n\t *\n\t * @returns {RTCSctpStreamParameters}\n\t */\n\tget sctpStreamParameters()\n\t{\n\t\treturn this._sctpStreamParameters;\n\t}\n\n\t/**\n\t * DataChannel readyState.\n\t *\n\t * @returns {String}\n\t */\n\tget readyState()\n\t{\n\t\treturn this._dataChannel.readyState;\n\t}\n\n\t/**\n\t * DataChannel label.\n\t *\n\t * @returns {String}\n\t */\n\tget label()\n\t{\n\t\treturn this._dataChannel.label;\n\t}\n\n\t/**\n\t * DataChannel protocol.\n\t *\n\t * @returns {String}\n\t */\n\tget protocol()\n\t{\n\t\treturn this._dataChannel.protocol;\n\t}\n\n\t/**\n\t * DataChannel bufferedAmount.\n\t *\n\t * @returns {String}\n\t */\n\tget bufferedAmount()\n\t{\n\t\treturn this._dataChannel.bufferedAmount;\n\t}\n\n\t/**\n\t * DataChannel bufferedAmountLowThreshold.\n\t *\n\t * @returns {String}\n\t */\n\tget bufferedAmountLowThreshold()\n\t{\n\t\treturn this._dataChannel.bufferedAmountLowThreshold;\n\t}\n\n\t/**\n\t * Set DataChannel bufferedAmountLowThreshold.\n\t *\n\t * @param {Number} bufferedAmountLowThreshold\n\t */\n\tset bufferedAmountLowThreshold(bufferedAmountLowThreshold)\n\t{\n\t\tthis._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget appData()\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Closes the DataProducer.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.emit('@close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t *\n\t * @private\n\t */\n\ttransportClosed()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.safeEmit('transportclose');\n\t}\n\n\t/**\n\t * Send a message.\n\t *\n\t * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.\n\t *\n\t * @throws {InvalidStateError} if DataProducer closed.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tsend(data)\n\t{\n\t\tlogger.debug('send()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\tthis._dataChannel.send(data);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleDataChannel()\n\t{\n\t\tthis._dataChannel.addEventListener('open', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('DataChannel \"open\" event');\n\n\t\t\tthis.safeEmit('open');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('error', (event) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlet { error } = event;\n\n\t\t\tif (!error)\n\t\t\t\terror = new Error('unknown DataChannel error');\n\n\t\t\tif (error.errorDetail === 'sctp-failure')\n\t\t\t{\n\t\t\t\tlogger.error(\n\t\t\t\t\t'DataChannel SCTP error [sctpCauseCode:%s]: %s',\n\t\t\t\t\terror.sctpCauseCode, error.message);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlogger.error('DataChannel \"error\" event: %o', error);\n\t\t\t}\n\n\t\t\tthis.safeEmit('error', error);\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('close', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.warn('DataChannel \"close\" event');\n\n\t\t\tthis._closed = true;\n\n\t\t\tthis.emit('@close');\n\t\t\tthis.safeEmit('close');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('message', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.warn(\n\t\t\t\t'DataChannel \"message\" event in a DataProducer, message discarded');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('bufferedamountlow', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis.safeEmit('bufferedamountlow');\n\t\t});\n\t}\n}\n\nmodule.exports = DataProducer;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/DataProducer.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/Device.js":
/*!*****************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/Device.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst { UnsupportedError, InvalidStateError } = __webpack_require__(/*! ./errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst detectDevice = __webpack_require__(/*! ./detectDevice */ \"./node_modules/mediasoup-client/lib/detectDevice.js\");\nconst ortc = __webpack_require__(/*! ./ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst Transport = __webpack_require__(/*! ./Transport */ \"./node_modules/mediasoup-client/lib/Transport.js\");\nconst Chrome74 = __webpack_require__(/*! ./handlers/Chrome74 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome74.js\");\nconst Chrome70 = __webpack_require__(/*! ./handlers/Chrome70 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome70.js\");\nconst Chrome67 = __webpack_require__(/*! ./handlers/Chrome67 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome67.js\");\nconst Chrome55 = __webpack_require__(/*! ./handlers/Chrome55 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome55.js\");\nconst Firefox60 = __webpack_require__(/*! ./handlers/Firefox60 */ \"./node_modules/mediasoup-client/lib/handlers/Firefox60.js\");\nconst Safari12 = __webpack_require__(/*! ./handlers/Safari12 */ \"./node_modules/mediasoup-client/lib/handlers/Safari12.js\");\nconst Safari11 = __webpack_require__(/*! ./handlers/Safari11 */ \"./node_modules/mediasoup-client/lib/handlers/Safari11.js\");\nconst Edge11 = __webpack_require__(/*! ./handlers/Edge11 */ \"./node_modules/mediasoup-client/lib/handlers/Edge11.js\");\nconst ReactNative = __webpack_require__(/*! ./handlers/ReactNative */ \"./node_modules/mediasoup-client/lib/handlers/ReactNative.js\");\n\nconst logger = new Logger('Device');\n\nclass Device\n{\n\t/**\n\t * Create a new Device to connect to mediasoup server.\n\t *\n\t * @param {Class|String} [Handler] - An optional RTC handler class for unsupported or\n\t *   custom devices (not needed when running in a browser). If a String, it will\n\t *   force usage of the given built-in handler.\n\t *\n\t * @throws {UnsupportedError} if device is not supported.\n\t */\n\tconstructor({ Handler } = {})\n\t{\n\t\tif (typeof Handler === 'string')\n\t\t{\n\t\t\tswitch (Handler)\n\t\t\t{\n\t\t\t\tcase 'Chrome74':\n\t\t\t\t\tHandler = Chrome74;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Chrome70':\n\t\t\t\t\tHandler = Chrome70;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Chrome67':\n\t\t\t\t\tHandler = Chrome67;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Chrome55':\n\t\t\t\t\tHandler = Chrome55;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Firefox60':\n\t\t\t\t\tHandler = Firefox60;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Safari12':\n\t\t\t\t\tHandler = Safari12;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Safari11':\n\t\t\t\t\tHandler = Safari11;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Edge11':\n\t\t\t\t\tHandler = Edge11;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ReactNative':\n\t\t\t\t\tHandler = ReactNative;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(`unknown Handler \"${Handler}\"`);\n\t\t\t}\n\t\t}\n\n\t\t// RTC handler class.\n\t\tthis._Handler = Handler || detectDevice();\n\n\t\tif (!this._Handler)\n\t\t\tthrow new UnsupportedError('device not supported');\n\n\t\tlogger.debug('constructor() [Handler:%s]', this._Handler.name);\n\n\t\t// Loaded flag.\n\t\t// @type {Boolean}\n\t\tthis._loaded = false;\n\n\t\t// Extended RTP capabilities.\n\t\t// @type {Object}\n\t\tthis._extendedRtpCapabilities = null;\n\n\t\t// Local RTP capabilities for receiving media.\n\t\t// @type {RTCRtpCapabilities}\n\t\tthis._recvRtpCapabilities = null;\n\n\t\t// Whether we can produce audio/video based on computed extended RTP\n\t\t// capabilities.\n\t\t// @type {Object}\n\t\tthis._canProduceByKind =\n\t\t{\n\t\t\taudio : false,\n\t\t\tvideo : false\n\t\t};\n\n\t\t// Local SCTP capabilities.\n\t\t// @type {Object}\n\t\tthis._sctpCapabilities = null;\n\t}\n\n\t/**\n\t * The RTC handler class name ('Chrome70', 'Firefox65', etc).\n\t *\n\t * @returns {String}\n\t */\n\tget handlerName()\n\t{\n\t\treturn this._Handler.name;\n\t}\n\n\t/**\n\t * Whether the Device is loaded.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget loaded()\n\t{\n\t\treturn this._loaded;\n\t}\n\n\t/**\n\t * RTP capabilities of the Device for receiving media.\n\t *\n\t * @returns {RTCRtpCapabilities}\n\t * @throws {InvalidStateError} if not loaded.\n\t */\n\tget rtpCapabilities()\n\t{\n\t\tif (!this._loaded)\n\t\t\tthrow new InvalidStateError('not loaded');\n\n\t\treturn this._recvRtpCapabilities;\n\t}\n\n\t/**\n\t * SCTP capabilities of the Device.\n\t *\n\t * @returns {Object}\n\t * @throws {InvalidStateError} if not loaded.\n\t */\n\tget sctpCapabilities()\n\t{\n\t\tif (!this._loaded)\n\t\t\tthrow new InvalidStateError('not loaded');\n\n\t\treturn this._sctpCapabilities;\n\t}\n\n\t/**\n\t * Initialize the Device.\n\t *\n\t * @param {RTCRtpCapabilities} routerRtpCapabilities - Router RTP capabilities.\n\t *\n\t * @async\n\t * @throws {TypeError} if missing/wrong arguments.\n\t * @throws {InvalidStateError} if already loaded.\n\t */\n\tasync load({ routerRtpCapabilities } = {})\n\t{\n\t\tlogger.debug('load() [routerRtpCapabilities:%o]', routerRtpCapabilities);\n\n\t\tif (this._loaded)\n\t\t\tthrow new InvalidStateError('already loaded');\n\t\telse if (typeof routerRtpCapabilities !== 'object')\n\t\t\tthrow new TypeError('missing routerRtpCapabilities');\n\n\t\tconst nativeRtpCapabilities = await this._Handler.getNativeRtpCapabilities();\n\n\t\tlogger.debug(\n\t\t\t'load() | got native RTP capabilities:%o', nativeRtpCapabilities);\n\n\t\t// Get extended RTP capabilities.\n\t\tthis._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(\n\t\t\tnativeRtpCapabilities, routerRtpCapabilities);\n\n\t\tlogger.debug(\n\t\t\t'load() | got extended RTP capabilities:%o', this._extendedRtpCapabilities);\n\n\t\t// Check whether we can produce audio/video.\n\t\tthis._canProduceByKind.audio =\n\t\t\tortc.canSend('audio', this._extendedRtpCapabilities);\n\t\tthis._canProduceByKind.video =\n\t\t\tortc.canSend('video', this._extendedRtpCapabilities);\n\n\t\t// Generate our receiving RTP capabilities for receiving media.\n\t\tthis._recvRtpCapabilities =\n\t\t\tortc.getRecvRtpCapabilities(this._extendedRtpCapabilities);\n\n\t\tlogger.debug(\n\t\t\t'load() | got receiving RTP capabilities:%o', this._recvRtpCapabilities);\n\n\t\tthis._sctpCapabilities = await this._Handler.getNativeSctpCapabilities();\n\n\t\tlogger.debug(\n\t\t\t'load() | got native SCTP capabilities:%o', this._sctpCapabilities);\n\n\t\tlogger.debug('load() succeeded');\n\n\t\tthis._loaded = true;\n\t}\n\n\t/**\n\t * Whether we can produce audio/video.\n\t *\n\t * @param {String} kind - 'audio' or 'video'.\n\t *\n\t * @returns {Boolean}\n\t * @throws {InvalidStateError} if not loaded.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tcanProduce(kind)\n\t{\n\t\tif (!this._loaded)\n\t\t\tthrow new InvalidStateError('not loaded');\n\t\telse if (kind !== 'audio' && kind !== 'video')\n\t\t\tthrow new TypeError(`invalid kind \"${kind}\"`);\n\n\t\treturn this._canProduceByKind[kind];\n\t}\n\n\t/**\n\t * Creates a Transport for sending media.\n\t *\n\t * @param {String} - Server-side Transport id.\n\t * @param {RTCIceParameters} iceParameters - Server-side Transport ICE parameters.\n\t * @param {Array<RTCIceCandidate>} [iceCandidates] - Server-side Transport ICE candidates.\n\t * @param {RTCDtlsParameters} dtlsParameters - Server-side Transport DTLS parameters.\n\t * @param {Object} [sctpParameters] - Server-side SCTP parameters.\n\t * @param {Array<RTCIceServer>} [iceServers] - Array of ICE servers.\n\t * @param {RTCIceTransportPolicy} [iceTransportPolicy] - ICE transport\n\t *   policy.\n\t * @param {Object} [proprietaryConstraints] - RTCPeerConnection proprietary constraints.\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @returns {Transport}\n\t * @throws {InvalidStateError} if not loaded.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tcreateSendTransport(\n\t\t{\n\t\t\tid,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\tappData = {}\n\t\t} = {}\n\t)\n\t{\n\t\tlogger.debug('createSendTransport()');\n\n\t\treturn this._createTransport(\n\t\t\t{\n\t\t\t\tdirection : 'send',\n\t\t\t\tid,\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\ticeServers,\n\t\t\t\ticeTransportPolicy,\n\t\t\t\tproprietaryConstraints,\n\t\t\t\tappData\n\t\t\t});\n\t}\n\n\t/**\n\t * Creates a Transport for receiving media.\n\t *\n\t * @param {String} - Server-side Transport id.\n\t * @param {RTCIceParameters} iceParameters - Server-side Transport ICE parameters.\n\t * @param {Array<RTCIceCandidate>} [iceCandidates] - Server-side Transport ICE candidates.\n\t * @param {RTCDtlsParameters} dtlsParameters - Server-side Transport DTLS parameters.\n\t * @param {Object} [sctpParameters] - Server-side SCTP parameters.\n\t * @param {Array<RTCIceServer>} [iceServers] - Array of ICE servers.\n\t * @param {RTCIceTransportPolicy} [iceTransportPolicy] - ICE transport\n\t *   policy.\n\t * @param {Object} [proprietaryConstraints] - RTCPeerConnection proprietary constraints.\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @returns {Transport}\n\t * @throws {InvalidStateError} if not loaded.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tcreateRecvTransport(\n\t\t{\n\t\t\tid,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\tappData = {}\n\t\t} = {}\n\t)\n\t{\n\t\tlogger.debug('createRecvTransport()');\n\n\t\treturn this._createTransport(\n\t\t\t{\n\t\t\t\tdirection : 'recv',\n\t\t\t\tid,\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\ticeServers,\n\t\t\t\ticeTransportPolicy,\n\t\t\t\tproprietaryConstraints,\n\t\t\t\tappData\n\t\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_createTransport(\n\t\t{\n\t\t\tdirection,\n\t\t\tid,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\tappData = {}\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('createTransport()');\n\n\t\tif (!this._loaded)\n\t\t\tthrow new InvalidStateError('not loaded');\n\t\telse if (typeof id !== 'string')\n\t\t\tthrow new TypeError('missing id');\n\t\telse if (typeof iceParameters !== 'object')\n\t\t\tthrow new TypeError('missing iceParameters');\n\t\telse if (!Array.isArray(iceCandidates))\n\t\t\tthrow new TypeError('missing iceCandidates');\n\t\telse if (typeof dtlsParameters !== 'object')\n\t\t\tthrow new TypeError('missing dtlsParameters');\n\t\telse if (sctpParameters && typeof sctpParameters !== 'object')\n\t\t\tthrow new TypeError('wrong sctpParameters');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Create a new Transport.\n\t\tconst transport = new Transport(\n\t\t\t{\n\t\t\t\tdirection,\n\t\t\t\tid,\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\ticeServers,\n\t\t\t\ticeTransportPolicy,\n\t\t\t\tproprietaryConstraints,\n\t\t\t\tappData,\n\t\t\t\tHandler                 : this._Handler,\n\t\t\t\textendedRtpCapabilities : this._extendedRtpCapabilities,\n\t\t\t\tcanProduceByKind        : this._canProduceByKind\n\t\t\t});\n\n\t\treturn transport;\n\t}\n}\n\nmodule.exports = Device;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/Device.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { EventEmitter } = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nconst Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\n\nclass EnhancedEventEmitter extends EventEmitter\n{\n\tconstructor(logger)\n\t{\n\t\tsuper();\n\t\tthis.setMaxListeners(Infinity);\n\n\t\tthis._logger = logger || new Logger('EnhancedEventEmitter');\n\t}\n\n\tsafeEmit(event, ...args)\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis.emit(event, ...args);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tthis._logger.error(\n\t\t\t\t'safeEmit() | event listener threw an error [event:%s]:%o',\n\t\t\t\tevent, error);\n\t\t}\n\t}\n\n\tasync safeEmitAsPromise(event, ...args)\n\t{\n\t\treturn new Promise((resolve, reject) =>\n\t\t{\n\t\t\tthis.safeEmit(event, ...args, resolve, reject);\n\t\t});\n\t}\n}\n\nmodule.exports = EnhancedEventEmitter;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/Logger.js":
/*!*****************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/Logger.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const debug = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n\nconst APP_NAME = 'mediasoup-client';\n\nclass Logger\n{\n\tconstructor(prefix)\n\t{\n\t\tif (prefix)\n\t\t{\n\t\t\tthis._debug = debug(`${APP_NAME}:${prefix}`);\n\t\t\tthis._warn = debug(`${APP_NAME}:WARN:${prefix}`);\n\t\t\tthis._error = debug(`${APP_NAME}:ERROR:${prefix}`);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._debug = debug(APP_NAME);\n\t\t\tthis._warn = debug(`${APP_NAME}:WARN`);\n\t\t\tthis._error = debug(`${APP_NAME}:ERROR`);\n\t\t}\n\n\t\t/* eslint-disable no-console */\n\t\tthis._debug.log = console.info.bind(console);\n\t\tthis._warn.log = console.warn.bind(console);\n\t\tthis._error.log = console.error.bind(console);\n\t\t/* eslint-enable no-console */\n\t}\n\n\tget debug()\n\t{\n\t\treturn this._debug;\n\t}\n\n\tget warn()\n\t{\n\t\treturn this._warn;\n\t}\n\n\tget error()\n\t{\n\t\treturn this._error;\n\t}\n}\n\nmodule.exports = Logger;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/Logger.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/Producer.js":
/*!*******************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/Producer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError, InvalidStateError } = __webpack_require__(/*! ./errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\n\nconst logger = new Logger('Producer');\n\nclass Producer extends EnhancedEventEmitter\n{\n\t/**\n\t * @private\n\t *\n\t * @emits transportclose\n\t * @emits trackended\n\t * @emits {track: MediaStreamTrack} @replacetrack\n\t * @emits {spatialLayer: String} @setmaxspatiallayer\n\t * @emits @getstats\n\t * @emits @close\n\t */\n\tconstructor({ id, localId, track, rtpParameters, appData })\n\t{\n\t\tsuper(logger);\n\n\t\t// Id.\n\t\t// @type {String}\n\t\tthis._id = id;\n\n\t\t// Local id.\n\t\t// @type {String}\n\t\tthis._localId = localId;\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// Local track.\n\t\t// @type {MediaStreamTrack}\n\t\tthis._track = track;\n\n\t\t// RTP parameters.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._rtpParameters = rtpParameters;\n\n\t\t// Paused flag.\n\t\t// @type {Boolean}\n\t\tthis._paused = !track.enabled;\n\n\t\t// Video max spatial layer.\n\t\t// @type {Number|Undefined}\n\t\tthis._maxSpatialLayer = undefined;\n\n\t\t// App custom data.\n\t\t// @type {Object}\n\t\tthis._appData = appData;\n\n\t\tthis._onTrackEnded = this._onTrackEnded.bind(this);\n\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Producer id.\n\t *\n\t * @returns {String}\n\t */\n\tget id()\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Local id.\n\t *\n\t * @private\n\t * @returns {String}\n\t */\n\tget localId()\n\t{\n\t\treturn this._localId;\n\t}\n\n\t/**\n\t * Whether the Producer is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Media kind.\n\t *\n\t * @returns {String}\n\t */\n\tget kind()\n\t{\n\t\treturn this._track.kind;\n\t}\n\n\t/**\n\t * The associated track.\n\t *\n\t * @returns {MediaStreamTrack}\n\t */\n\tget track()\n\t{\n\t\treturn this._track;\n\t}\n\n\t/**\n\t * RTP parameters.\n\t *\n\t * @returns {RTCRtpParameters}\n\t */\n\tget rtpParameters()\n\t{\n\t\treturn this._rtpParameters;\n\t}\n\n\t/**\n\t * Whether the Producer is paused.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget paused()\n\t{\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * Max spatial layer.\n\t *\n\t * @type {Number}\n\t */\n\tget maxSpatialLayer()\n\t{\n\t\treturn this._maxSpatialLayer;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget appData()\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Closes the Producer.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.emit('@close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t *\n\t * @private\n\t */\n\ttransportClosed()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.safeEmit('transportclose');\n\t}\n\n\t/**\n\t * Get associated RTCRtpSender stats.\n\t *\n\t * @promise\n\t * @returns {RTCStatsReport}\n\t * @throws {InvalidStateError} if Producer closed.\n\t */\n\tasync getStats()\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this.safeEmitAsPromise('@getstats');\n\t}\n\n\t/**\n\t * Pauses sending media.\n\t */\n\tpause()\n\t{\n\t\tlogger.debug('pause()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('pause() | Producer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = true;\n\t\tthis._track.enabled = false;\n\t}\n\n\t/**\n\t * Resumes sending media.\n\t */\n\tresume()\n\t{\n\t\tlogger.debug('resume()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('resume() | Producer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = false;\n\t\tthis._track.enabled = true;\n\t}\n\n\t/**\n\t * Replaces the current track with a new one.\n\t *\n\t * @param {MediaStreamTrack} track - New track.\n\t *\n\t * @async\n\t * @throws {InvalidStateError} if Producer closed or track ended.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tasync replaceTrack({ track } = {})\n\t{\n\t\tlogger.debug('replaceTrack() [track:%o]', track);\n\n\t\tif (this._closed)\n\t\t{\n\t\t\t// This must be done here. Otherwise there is no chance to stop the given\n\t\t\t// track.\n\t\t\ttry { track.stop(); }\n\t\t\tcatch (error) {}\n\n\t\t\tthrow new InvalidStateError('closed');\n\t\t}\n\t\telse if (!track)\n\t\t{\n\t\t\tthrow new TypeError('missing track');\n\t\t}\n\t\telse if (track.readyState === 'ended')\n\t\t{\n\t\t\tthrow new InvalidStateError('track ended');\n\t\t}\n\n\t\tawait this.safeEmitAsPromise('@replacetrack', track);\n\n\t\t// Destroy the previous track.\n\t\tthis._destroyTrack();\n\n\t\t// Set the new track.\n\t\tthis._track = track;\n\n\t\t// If this Producer was paused/resumed and the state of the new\n\t\t// track does not match, fix it.\n\t\tif (!this._paused)\n\t\t\tthis._track.enabled = true;\n\t\telse\n\t\t\tthis._track.enabled = false;\n\n\t\t// Handle the effective track.\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Sets the video max spatial layer to be sent.\n\t *\n\t * @param {Number} spatialLayer\n\t *\n\t * @async\n\t * @throws {InvalidStateError} if Producer closed.\n\t * @throws {UnsupportedError} if not a video Producer.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tasync setMaxSpatialLayer(spatialLayer)\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._track.kind !== 'video')\n\t\t\tthrow new UnsupportedError('not a video Producer');\n\t\telse if (typeof spatialLayer !== 'number')\n\t\t\tthrow new TypeError('invalid spatialLayer');\n\n\t\tif (spatialLayer === this._maxSpatialLayer)\n\t\t\treturn;\n\n\t\tawait this.safeEmitAsPromise('@setmaxspatiallayer', spatialLayer);\n\n\t\tthis._maxSpatialLayer = spatialLayer;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_onTrackEnded()\n\t{\n\t\tlogger.debug('track \"ended\" event');\n\n\t\tthis.safeEmit('trackended');\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_handleTrack()\n\t{\n\t\tthis._track.addEventListener('ended', this._onTrackEnded);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_destroyTrack()\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis._track.removeEventListener('ended', this._onTrackEnded);\n\t\t\tthis._track.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{}\n\t}\n}\n\nmodule.exports = Producer;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/Producer.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/Transport.js":
/*!********************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/Transport.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const AwaitQueue = __webpack_require__(/*! awaitqueue */ \"./node_modules/awaitqueue/index.js\");\nconst Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ./EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError, InvalidStateError } = __webpack_require__(/*! ./errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst ortc = __webpack_require__(/*! ./ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst Producer = __webpack_require__(/*! ./Producer */ \"./node_modules/mediasoup-client/lib/Producer.js\");\nconst Consumer = __webpack_require__(/*! ./Consumer */ \"./node_modules/mediasoup-client/lib/Consumer.js\");\nconst DataProducer = __webpack_require__(/*! ./DataProducer */ \"./node_modules/mediasoup-client/lib/DataProducer.js\");\nconst DataConsumer = __webpack_require__(/*! ./DataConsumer */ \"./node_modules/mediasoup-client/lib/DataConsumer.js\");\n\nconst logger = new Logger('Transport');\n\nclass Transport extends EnhancedEventEmitter\n{\n\t/**\n\t * @private\n\t *\n\t * @emits {transportLocalParameters: Object, callback: Function, errback: Function} connect\n\t * @emits {connectionState: String} connectionstatechange\n\t * @emits {producerLocalParameters: Object, callback: Function, errback: Function} produce\n\t * @emits {dataProducerLocalParameters: Object, callback: Function, errback: Function} producedata\n\t */\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\tid,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\tappData,\n\t\t\tHandler,\n\t\t\textendedRtpCapabilities,\n\t\t\tcanProduceByKind\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\tlogger.debug('constructor() [id:%s, direction:%s]', id, direction);\n\n\t\t// Id.\n\t\t// @type {String}\n\t\tthis._id = id;\n\n\t\t// Closed flag.\n\t\t// @type {Boolean}\n\t\tthis._closed = false;\n\n\t\t// Direction.\n\t\t// @type {String}\n\t\tthis._direction = direction;\n\n\t\t// Extended RTP capabilities.\n\t\t// @type {Object}\n\t\tthis._extendedRtpCapabilities = extendedRtpCapabilities;\n\n\t\t// Whether we can produce audio/video based on computed extended RTP\n\t\t// capabilities.\n\t\t// @type {Object}\n\t\tthis._canProduceByKind = canProduceByKind;\n\n\t\t// SCTP max message size if enabled, null otherwise.\n\t\t// @type {Number|Null}\n\t\tthis._maxSctpMessageSize =\n\t\t\tsctpParameters ? sctpParameters.maxMessageSize : null;\n\n\t\t// RTC handler instance.\n\t\t// @type {Handler}\n\t\tthis._handler = new Handler(\n\t\t\t{\n\t\t\t\tdirection,\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\ticeServers,\n\t\t\t\ticeTransportPolicy,\n\t\t\t\tproprietaryConstraints,\n\t\t\t\textendedRtpCapabilities\n\t\t\t});\n\n\t\t// Transport connection state. Values can be:\n\t\t// 'new'/'connecting'/'connected'/'failed'/'disconnected'/'closed'\n\t\t// @type {String}\n\t\tthis._connectionState = 'new';\n\n\t\t// App custom data.\n\t\t// @type {Object}\n\t\tthis._appData = appData;\n\n\t\t// Map of Producers indexed by id.\n\t\t// @type {Map<String, Producer>}\n\t\tthis._producers = new Map();\n\n\t\t// Map of Consumers indexed by id.\n\t\t// @type {Map<String, Consumer>}\n\t\tthis._consumers = new Map();\n\n\t\t// Map of DataProducers indexed by id.\n\t\t// @type {Map<String, DataProducer>}\n\t\tthis._dataProducers = new Map();\n\n\t\t// Map of DataConsumers indexed by id.\n\t\t// @type {Map<String, DataConsumer>}\n\t\tthis._dataConsumers = new Map();\n\n\t\t// AwaitQueue instance to make async tasks happen sequentially.\n\t\t// @type {AwaitQueue}\n\t\tthis._awaitQueue = new AwaitQueue({ ClosedErrorClass: InvalidStateError });\n\n\t\tthis._handleHandler();\n\t}\n\n\t/**\n\t * Transport id.\n\t *\n\t * @returns {String}\n\t */\n\tget id()\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Whether the Transport is closed.\n\t *\n\t * @returns {Boolean}\n\t */\n\tget closed()\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Transport direction.\n\t *\n\t * @returns {String}\n\t */\n\tget direction()\n\t{\n\t\treturn this._direction;\n\t}\n\n\t/**\n\t * RTC handler instance.\n\t *\n\t * @returns {Handler}\n\t */\n\tget handler()\n\t{\n\t\treturn this._handler;\n\t}\n\n\t/**\n\t * Connection state.\n\t *\n\t * @returns {String}\n\t */\n\tget connectionState()\n\t{\n\t\treturn this._connectionState;\n\t}\n\n\t/**\n\t * App custom data.\n\t *\n\t * @returns {Object}\n\t */\n\tget appData()\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Close the Transport.\n\t */\n\tclose()\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\t// Close the AwaitQueue.\n\t\tthis._awaitQueue.close();\n\n\t\t// Close the handler.\n\t\tthis._handler.close();\n\n\t\t// Close all Producers.\n\t\tfor (const producer of this._producers.values())\n\t\t{\n\t\t\tproducer.transportClosed();\n\t\t}\n\t\tthis._producers.clear();\n\n\t\t// Close all Consumers.\n\t\tfor (const consumer of this._consumers.values())\n\t\t{\n\t\t\tconsumer.transportClosed();\n\t\t}\n\t\tthis._consumers.clear();\n\n\t\t// Close all DataProducers.\n\t\tfor (const dataProducer of this._dataProducers.values())\n\t\t{\n\t\t\tdataProducer.transportClosed();\n\t\t}\n\t\tthis._dataProducers.clear();\n\n\t\t// Close all DataConsumers.\n\t\tfor (const dataConsumer of this._dataConsumers.values())\n\t\t{\n\t\t\tdataConsumer.transportClosed();\n\t\t}\n\t\tthis._dataConsumers.clear();\n\t}\n\n\t/**\n\t * Get associated Transport (RTCPeerConnection) stats.\n\t *\n\t * @async\n\t * @returns {RTCStatsReport}\n\t * @throws {InvalidStateError} if Transport closed.\n\t */\n\tasync getStats()\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this._handler.getTransportStats();\n\t}\n\n\t/**\n\t * Restart ICE connection.\n\t *\n\t * @param {RTCIceParameters} iceParameters - New Server-side Transport ICE parameters.\n\t *\n\t * @async\n\t * @throws {InvalidStateError} if Transport closed.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tasync restartIce({ iceParameters } = {})\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (!iceParameters)\n\t\t\tthrow new TypeError('missing iceParameters');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () => this._handler.restartIce({ iceParameters }));\n\t}\n\n\t/**\n\t * Update ICE servers.\n\t *\n\t * @param {Array<RTCIceServer>} [iceServers] - Array of ICE servers.\n\t *\n\t * @async\n\t * @throws {InvalidStateError} if Transport closed.\n\t * @throws {TypeError} if wrong arguments.\n\t */\n\tasync updateIceServers({ iceServers } = {})\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (!Array.isArray(iceServers))\n\t\t\tthrow new TypeError('missing iceServers');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () => this._handler.updateIceServers({ iceServers }));\n\t}\n\n\t/**\n\t * Create a Producer.\n\t *\n\t * @param {MediaStreamTrack} track - Track to sent.\n\t * @param {Array<RTCRtpCodingParameters>} [encodings] - Encodings.\n\t * @param {Object} [codecOptions] - Codec options.\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @async\n\t * @returns {Producer}\n\t * @throws {InvalidStateError} if Transport closed or track ended.\n\t * @throws {TypeError} if wrong arguments.\n\t * @throws {UnsupportedError} if Transport direction is incompatible or\n\t *   cannot produce the given media kind.\n\t */\n\tasync produce(\n\t\t{\n\t\t\ttrack,\n\t\t\tencodings,\n\t\t\tcodecOptions,\n\t\t\tappData = {}\n\t\t} = {}\n\t)\n\t{\n\t\tlogger.debug('produce() [track:%o]', track);\n\n\t\tif (!track)\n\t\t\tthrow new TypeError('missing track');\n\t\telse if (this._direction !== 'send')\n\t\t\tthrow new UnsupportedError('not a sending Transport');\n\t\telse if (!this._canProduceByKind[track.kind])\n\t\t\tthrow new UnsupportedError(`cannot produce ${track.kind}`);\n\t\telse if (track.readyState === 'ended')\n\t\t\tthrow new InvalidStateError('track ended');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tlet normalizedEncodings;\n\n\t\t\t\tif (encodings && !Array.isArray(encodings))\n\t\t\t\t{\n\t\t\t\t\tthrow TypeError('encodings must be an array');\n\t\t\t\t}\n\t\t\t\telse if (encodings && encodings.length === 0)\n\t\t\t\t{\n\t\t\t\t\tnormalizedEncodings = undefined;\n\t\t\t\t}\n\t\t\t\telse if (encodings)\n\t\t\t\t{\n\t\t\t\t\tnormalizedEncodings = encodings\n\t\t\t\t\t\t.map((encoding) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst normalizedEncoding = { active: true };\n\n\t\t\t\t\t\t\tif (encoding.active === false)\n\t\t\t\t\t\t\t\tnormalizedEncoding.active = false;\n\t\t\t\t\t\t\tif (typeof encoding.maxBitrate === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.maxBitrate = encoding.maxBitrate;\n\t\t\t\t\t\t\tif (typeof encoding.maxFramerate === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.maxFramerate = encoding.maxFramerate;\n\t\t\t\t\t\t\tif (typeof encoding.scaleResolutionDownBy === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;\n\t\t\t\t\t\t\tif (typeof encoding.dtx === 'boolean')\n\t\t\t\t\t\t\t\tnormalizedEncoding.dtx = encoding.dtx;\n\t\t\t\t\t\t\tif (typeof encoding.scalabilityMode === 'string')\n\t\t\t\t\t\t\t\tnormalizedEncoding.scalabilityMode = encoding.scalabilityMode;\n\n\t\t\t\t\t\t\treturn normalizedEncoding;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst { localId, rtpParameters } = await this._handler.send(\n\t\t\t\t\t{\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\tencodings : normalizedEncodings,\n\t\t\t\t\t\tcodecOptions\n\t\t\t\t\t});\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tconst { id } = await this.safeEmitAsPromise(\n\t\t\t\t\t\t'produce',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind : track.kind,\n\t\t\t\t\t\t\trtpParameters,\n\t\t\t\t\t\t\tappData\n\t\t\t\t\t\t});\n\n\t\t\t\t\tconst producer =\n\t\t\t\t\t\tnew Producer({ id, localId, track, rtpParameters, appData });\n\n\t\t\t\t\tthis._producers.set(producer.id, producer);\n\t\t\t\t\tthis._handleProducer(producer);\n\n\t\t\t\t\treturn producer;\n\t\t\t\t}\n\t\t\t\tcatch (error)\n\t\t\t\t{\n\t\t\t\t\tthis._handler.stopSending({ localId })\n\t\t\t\t\t\t.catch(() => {});\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t})\n\t\t\t// This catch is needed to stop the given track if the command above\n\t\t\t// failed due to closed Transport.\n\t\t\t.catch((error) =>\n\t\t\t{\n\t\t\t\ttry { track.stop(); }\n\t\t\t\tcatch (error2) {}\n\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\t/**\n\t * Create a Consumer to consume a remote Producer.\n\t *\n\t * @param {String} id - Server-side Consumer id.\n\t * @param {String} producerId - Server-side Producer id.\n\t * @param {String} kind - 'audio' or 'video'.\n\t * @param {RTCRtpParameters} rtpParameters - Server-side Consumer RTP parameters.\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @async\n\t * @returns {Consumer}\n\t * @throws {InvalidStateError} if Transport closed.\n\t * @throws {TypeError} if wrong arguments.\n\t * @throws {UnsupportedError} if Transport direction is incompatible.\n\t */\n\tasync consume(\n\t\t{\n\t\t\tid,\n\t\t\tproducerId,\n\t\t\tkind,\n\t\t\trtpParameters,\n\t\t\tappData = {}\n\t\t} = {})\n\t{\n\t\tlogger.debug('consume()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._direction !== 'recv')\n\t\t\tthrow new UnsupportedError('not a receiving Transport');\n\t\telse if (typeof id !== 'string')\n\t\t\tthrow new TypeError('missing id');\n\t\telse if (typeof producerId !== 'string')\n\t\t\tthrow new TypeError('missing producerId');\n\t\telse if (kind !== 'audio' && kind !== 'video')\n\t\t\tthrow new TypeError(`invalid kind \"${kind}\"`);\n\t\telse if (typeof rtpParameters !== 'object')\n\t\t\tthrow new TypeError('missing rtpParameters');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\t// Ensure the device can consume it.\n\t\t\t\tconst canConsume = ortc.canReceive(\n\t\t\t\t\trtpParameters, this._extendedRtpCapabilities);\n\n\t\t\t\tif (!canConsume)\n\t\t\t\t\tthrow new UnsupportedError('cannot consume this Producer');\n\n\t\t\t\tconst { localId, track } =\n\t\t\t\t\tawait this._handler.receive({ id, kind, rtpParameters });\n\n\t\t\t\tconst consumer =\n\t\t\t\t\tnew Consumer({ id, localId, producerId, track, rtpParameters, appData });\n\n\t\t\t\tthis._consumers.set(consumer.id, consumer);\n\t\t\t\tthis._handleConsumer(consumer);\n\n\t\t\t\treturn consumer;\n\t\t\t});\n\t}\n\n\t/**\n\t * Create a DataProducer\n\t *\n\t * @param {Boolean} [ordered=true]\n\t * @param {Number} [maxPacketLifeTime]\n\t * @param {Number} [maxRetransmits]\n\t * @param {String} [priority='low'] // 'very-low' / 'low' / 'medium' / 'high'\n\t * @param {String} [label='']\n\t * @param {String} [protocol='']\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @async\n\t * @returns {DataProducer}\n\t * @throws {InvalidStateError} if Transport closed.\n\t * @throws {TypeError} if wrong arguments.\n\t * @throws {UnsupportedError} if Transport direction is incompatible or remote\n\t *   transport does not enable SCTP.\n\t */\n\tasync produceData(\n\t\t{\n\t\t\tordered = true,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tpriority = 'low',\n\t\t\tlabel = '',\n\t\t\tprotocol = '',\n\t\t\tappData = {}\n\t\t} = {}\n\t)\n\t{\n\t\tlogger.debug('produceData()');\n\n\t\tif (this._direction !== 'send')\n\t\t\tthrow new UnsupportedError('not a sending Transport');\n\t\telse if (!this._maxSctpMessageSize)\n\t\t\tthrow new UnsupportedError('SCTP not enabled by remote Transport');\n\t\telse if (![ 'very-low', 'low', 'medium', 'high' ].includes(priority))\n\t\t\tthrow new TypeError('wrong priority');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\tif (maxPacketLifeTime || maxRetransmits)\n\t\t\tordered = false;\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tconst {\n\t\t\t\t\tdataChannel,\n\t\t\t\t\tsctpStreamParameters\n\t\t\t\t} = await this._handler.sendDataChannel(\n\t\t\t\t\t{\n\t\t\t\t\t\tordered,\n\t\t\t\t\t\tmaxPacketLifeTime,\n\t\t\t\t\t\tmaxRetransmits,\n\t\t\t\t\t\tpriority,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol\n\t\t\t\t\t});\n\n\t\t\t\tconst { id } = await this.safeEmitAsPromise(\n\t\t\t\t\t'producedata',\n\t\t\t\t\t{\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\tappData\n\t\t\t\t\t});\n\n\t\t\t\tconst dataProducer =\n\t\t\t\t\tnew DataProducer({ id, dataChannel, sctpStreamParameters, appData });\n\n\t\t\t\tthis._dataProducers.set(dataProducer.id, dataProducer);\n\t\t\t\tthis._handleDataProducer(dataProducer);\n\n\t\t\t\treturn dataProducer;\n\t\t\t});\n\t}\n\n\t/**\n\t * Create a DataConsumer\n\t *\n\t * @param {String} id - Server-side DataConsumer id.\n\t * @param {String} dataProducerId - Server-side DataProducer id.\n\t * @param {RTCSctpStreamParameters} sctpStreamParameters - Server-side DataConsumer\n\t *   SCTP parameters.\n\t * @param {String} [label='']\n\t * @param {String} [protocol='']\n\t * @param {Object} [appData={}] - Custom app data.\n\t *\n\t * @async\n\t * @returns {DataConsumer}\n\t * @throws {InvalidStateError} if Transport closed.\n\t * @throws {TypeError} if wrong arguments.\n\t * @throws {UnsupportedError} if Transport direction is incompatible or remote\n\t *   transport does not enable SCTP.\n\t */\n\tasync consumeData(\n\t\t{\n\t\t\tid,\n\t\t\tdataProducerId,\n\t\t\tsctpStreamParameters,\n\t\t\tlabel = '',\n\t\t\tprotocol = '',\n\t\t\tappData = {}\n\t\t} = {}\n\t)\n\t{\n\t\tlogger.debug('consumeData()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._direction !== 'recv')\n\t\t\tthrow new UnsupportedError('not a receiving Transport');\n\t\telse if (!this._maxSctpMessageSize)\n\t\t\tthrow new UnsupportedError('SCTP not enabled by remote Transport');\n\t\telse if (typeof id !== 'string')\n\t\t\tthrow new TypeError('missing id');\n\t\telse if (typeof dataProducerId !== 'string')\n\t\t\tthrow new TypeError('missing dataProducerId');\n\t\telse if (typeof sctpStreamParameters !== 'object')\n\t\t\tthrow new TypeError('missing sctpStreamParameters');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tconst {\n\t\t\t\t\tdataChannel\n\t\t\t\t} = await this._handler.receiveDataChannel(\n\t\t\t\t\t{\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol\n\t\t\t\t\t});\n\n\t\t\t\tconst dataConsumer = new DataConsumer(\n\t\t\t\t\t{\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tdataProducerId,\n\t\t\t\t\t\tdataChannel,\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tappData\n\t\t\t\t\t});\n\n\t\t\t\tthis._dataConsumers.set(dataConsumer.id, dataConsumer);\n\t\t\t\tthis._handleDataConsumer(dataConsumer);\n\n\t\t\t\treturn dataConsumer;\n\t\t\t});\n\t}\n\n\t_handleHandler()\n\t{\n\t\tconst handler = this._handler;\n\n\t\thandler.on('@connect', ({ dtlsParameters }, callback, errback) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t{\n\t\t\t\terrback(new InvalidStateError('closed'));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.safeEmit('connect', { dtlsParameters }, callback, errback);\n\t\t});\n\n\t\thandler.on('@connectionstatechange', (connectionState) =>\n\t\t{\n\t\t\tif (connectionState === this._connectionState)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('connection state changed to %s', connectionState);\n\n\t\t\tthis._connectionState = connectionState;\n\n\t\t\tif (!this._closed)\n\t\t\t\tthis.safeEmit('connectionstatechange', connectionState);\n\t\t});\n\t}\n\n\t_handleProducer(producer)\n\t{\n\t\tproducer.on('@close', () =>\n\t\t{\n\t\t\tthis._producers.delete(producer.id);\n\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.stopSending({ localId: producer.localId }))\n\t\t\t\t.catch((error) => logger.warn('producer.close() failed:%o', error));\n\t\t});\n\n\t\tproducer.on('@replacetrack', (track, callback, errback) =>\n\t\t{\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.replaceTrack({ localId: producer.localId, track }))\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\n\t\tproducer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) =>\n\t\t{\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => (\n\t\t\t\t\tthis._handler.setMaxSpatialLayer({ localId: producer.localId, spatialLayer })\n\t\t\t\t))\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\n\t\tproducer.on('@getstats', (callback, errback) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn errback(new InvalidStateError('closed'));\n\n\t\t\tthis._handler.getSenderStats({ localId: producer.localId })\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\t}\n\n\t_handleConsumer(consumer)\n\t{\n\t\tconsumer.on('@close', () =>\n\t\t{\n\t\t\tthis._consumers.delete(consumer.id);\n\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.stopReceiving({ localId: consumer.localId }))\n\t\t\t\t.catch(() => {});\n\t\t});\n\n\t\tconsumer.on('@getstats', (callback, errback) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn errback(new InvalidStateError('closed'));\n\n\t\t\tthis._handler.getReceiverStats({ localId: consumer.localId })\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\t}\n\n\t_handleDataProducer(dataProducer)\n\t{\n\t\tdataProducer.on('@close', () =>\n\t\t{\n\t\t\tthis._dataProducers.delete(dataProducer.id);\n\t\t});\n\t}\n\n\t_handleDataConsumer(dataConsumer)\n\t{\n\t\tdataConsumer.on('@close', () =>\n\t\t{\n\t\t\tthis._dataConsumers.delete(dataConsumer.id);\n\t\t});\n\t}\n}\n\nmodule.exports = Transport;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/Transport.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/detectDevice.js":
/*!***********************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/detectDevice.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* global RTCRtpTransceiver */\n\nconst bowser = __webpack_require__(/*! bowser */ \"./node_modules/bowser/es5.js\");\nconst Logger = __webpack_require__(/*! ./Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\n// const Chrome74 = require('./handlers/Chrome74'); // Disable until reliable.\nconst Chrome70 = __webpack_require__(/*! ./handlers/Chrome70 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome70.js\");\nconst Chrome67 = __webpack_require__(/*! ./handlers/Chrome67 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome67.js\");\nconst Chrome55 = __webpack_require__(/*! ./handlers/Chrome55 */ \"./node_modules/mediasoup-client/lib/handlers/Chrome55.js\");\nconst Firefox60 = __webpack_require__(/*! ./handlers/Firefox60 */ \"./node_modules/mediasoup-client/lib/handlers/Firefox60.js\");\nconst Safari12 = __webpack_require__(/*! ./handlers/Safari12 */ \"./node_modules/mediasoup-client/lib/handlers/Safari12.js\");\nconst Safari11 = __webpack_require__(/*! ./handlers/Safari11 */ \"./node_modules/mediasoup-client/lib/handlers/Safari11.js\");\nconst Edge11 = __webpack_require__(/*! ./handlers/Edge11 */ \"./node_modules/mediasoup-client/lib/handlers/Edge11.js\");\nconst ReactNative = __webpack_require__(/*! ./handlers/ReactNative */ \"./node_modules/mediasoup-client/lib/handlers/ReactNative.js\");\n\nconst logger = new Logger('detectDevice');\n\nmodule.exports = function()\n{\n\t// React-Native.\n\tif (typeof navigator === 'object' && navigator.product === 'ReactNative')\n\t{\n\t\tif (typeof RTCPeerConnection !== 'undefined')\n\t\t{\n\t\t\treturn ReactNative;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlogger.warn('unsupported ReactNative without RTCPeerConnection');\n\n\t\t\treturn null;\n\t\t}\n\t}\n\t// browser.\n\telse if (typeof navigator === 'object' && typeof navigator.userAgent === 'string')\n\t{\n\t\tconst ua = navigator.userAgent;\n\t\tconst browser = bowser.getParser(ua);\n\t\tconst engine = browser.getEngine();\n\n\t\t// Chrome and Chromium.\n\t\t// if (browser.satisfies({ chrome: '>=74', chromium: '>=74' }))\n\t\t// {\n\t\t// \treturn Chrome74;\n\t\t// }\n\t\tif (browser.satisfies({ chrome: '>=70', chromium: '>=70' }))\n\t\t{\n\t\t\treturn Chrome70;\n\t\t}\n\t\telse if (browser.satisfies({ chrome: '>=67', chromium: '>=67' }))\n\t\t{\n\t\t\treturn Chrome67;\n\t\t}\n\t\telse if (browser.satisfies({ chrome: '>=55', chromium: '>=55' }))\n\t\t{\n\t\t\treturn Chrome55;\n\t\t}\n\t\t// Firefox.\n\t\telse if (browser.satisfies({ firefox: '>=60' }))\n\t\t{\n\t\t\treturn Firefox60;\n\t\t}\n\t\t// Safari with Unified-Plan support.\n\t\telse if (\n\t\t\tbrowser.satisfies({ safari: '>=12.1' }) &&\n\t\t\ttypeof RTCRtpTransceiver !== 'undefined' &&\n\t\t\tRTCRtpTransceiver.prototype.hasOwnProperty('currentDirection')\n\t\t)\n\t\t{\n\t\t\treturn Safari12;\n\t\t}\n\t\t// Safari with Plab-B support.\n\t\telse if (browser.satisfies({ safari: '>=11' }))\n\t\t{\n\t\t\treturn Safari11;\n\t\t}\n\t\t// Old Edge with ORTC support.\n\t\telse if (browser.satisfies({ 'microsoft edge': '~11' }))\n\t\t{\n\t\t\treturn Edge11;\n\t\t}\n\t\t// Best effort for Chromium based browsers.\n\t\telse if (engine.name.toLowerCase() === 'blink')\n\t\t{\n\t\t\tlogger.debug('best effort Chromium based browser detection');\n\n\t\t\tconst match = ua.match(/(?:(?:Chrome|Chromium))[ /](\\w+)/i);\n\n\t\t\tif (match)\n\t\t\t{\n\t\t\t\tconst version = Number(match[1]);\n\n\t\t\t\t// if (version >= 74)\n\t\t\t\t// \treturn Chrome74;\n\t\t\t\tif (version >= 70)\n\t\t\t\t\treturn Chrome70;\n\t\t\t\telse if (version >= 67)\n\t\t\t\t\treturn Chrome67;\n\t\t\t\telse\n\t\t\t\t\treturn Chrome55;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// return Chrome74;\n\t\t\t\treturn Chrome70;\n\t\t\t}\n\t\t}\n\t\t// Unsupported browser.\n\t\telse\n\t\t{\n\t\t\tlogger.warn(\n\t\t\t\t'browser not supported [name:%s, version:%s]',\n\t\t\t\tbrowser.getBrowserName(), browser.getBrowserVersion());\n\n\t\t\treturn null;\n\t\t}\n\t}\n\t// Unknown device.\n\telse\n\t{\n\t\tlogger.warn('unknown device');\n\n\t\treturn null;\n\t}\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/detectDevice.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/errors.js":
/*!*****************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/errors.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Error indicating not support for something.\n */\nclass UnsupportedError extends Error\n{\n\tconstructor(message)\n\t{\n\t\tsuper(message);\n\n\t\tthis.name = 'UnsupportedError';\n\n\t\tif (Error.hasOwnProperty('captureStackTrace')) // Just in V8.\n\t\t\tError.captureStackTrace(this, UnsupportedError);\n\t\telse\n\t\t\tthis.stack = (new Error(message)).stack;\n\t}\n}\n\n/**\n * Error produced when calling a method in an invalid state.\n */\nclass InvalidStateError extends Error\n{\n\tconstructor(message)\n\t{\n\t\tsuper(message);\n\n\t\tthis.name = 'InvalidStateError';\n\n\t\tif (Error.hasOwnProperty('captureStackTrace')) // Just in V8.\n\t\t\tError.captureStackTrace(this, InvalidStateError);\n\t\telse\n\t\t\tthis.stack = (new Error(message)).stack;\n\t}\n}\n\nmodule.exports =\n{\n\tUnsupportedError,\n\tInvalidStateError\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/errors.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Chrome55.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Chrome55.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpPlanBUtils = __webpack_require__(/*! ./sdp/planBUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('Chrome55');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\tplanB : true\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\n\t\t// Map of MediaStreamTracks indexed by localId.\n\t\t// @type {Map<Number, MediaStreamTracks>}\n\t\tthis._mapIdTrack = new Map();\n\n\t\t// Latest localId.\n\t\t// @type {Number}\n\t\tthis._lastId = 0;\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tthis._stream.addTrack(track);\n\t\tthis._pc.addStream(this._stream);\n\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (track.kind === 'video' && encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tofferMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'video');\n\n\t\t\tsdpPlanBUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\ttrack,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media\n\t\t\t.find((m) => m.type === track.kind);\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 and there is effective simulcast, add scalabilityMode to each\n\t\t// encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\tthis._lastId++;\n\n\t\t// Insert into the map.\n\t\tthis._mapIdTrack.set(this._lastId, track);\n\n\t\treturn { localId: this._lastId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst track = this._mapIdTrack.get(localId);\n\n\t\tif (!track)\n\t\t\tthrow new Error('track not found');\n\n\t\tthis._mapIdTrack.delete(localId);\n\n\t\tthis._stream.removeTrack(track);\n\t\tthis._pc.addStream(this._stream);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\ttry\n\t\t{\n\t\t\tawait this._pc.setLocalDescription(offer);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// NOTE: If there are no sending tracks, setLocalDescription() will fail with\n\t\t\t// \"Failed to create channels\". If so, ignore it.\n\t\t\tif (this._stream.getTracks().length === 0)\n\t\t\t{\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'stopSending() | ignoring expected error due no sending tracks: %s',\n\t\t\t\t\terror.toString());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this._pc.signalingState === 'stable')\n\t\t\treturn;\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\tasync getSenderStats({ localId }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n\t\t// Value is an Object with mid and rtpParameters.\n\t\t// @type {Map<String, Object>}\n\t\tthis._mapIdRtpParameters = new Map();\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = id;\n\t\tconst mid = kind;\n\t\tconst streamId = rtpParameters.rtcp.cname;\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId,\n\t\t\t\ttrackId            : localId\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === mid);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst stream = this._pc.getRemoteStreams()\n\t\t\t.find((s) => s.id === streamId);\n\t\tconst track = stream.getTrackById(localId);\n\n\t\tif (!track)\n\t\t\tthrow new Error('remote track not found');\n\n\t\t// Insert into the map.\n\t\tthis._mapIdRtpParameters.set(localId, { mid, rtpParameters });\n\n\t\treturn { localId, track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst { mid, rtpParameters } = this._mapIdRtpParameters.get(localId);\n\n\t\t// Remove from the map.\n\t\tthis._mapIdRtpParameters.delete(localId);\n\n\t\tthis._remoteSdp.planBStopReceiving(\n\t\t\t{ mid, offerRtpParameters: rtpParameters });\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Chrome55\n{\n\tstatic get name()\n\t{\n\t\treturn 'Chrome55';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tconst offer = await pc.createOffer(\n\t\t\t\t{\n\t\t\t\t\tofferToReceiveAudio : true,\n\t\t\t\t\tofferToReceiveVideo : true\n\t\t\t\t});\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Chrome55;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Chrome55.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Chrome67.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Chrome67.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpPlanBUtils = __webpack_require__(/*! ./sdp/planBUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('Chrome67');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\tplanB : true\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\n\t\t// Map of MediaStreamTracks indexed by localId.\n\t\t// @type {Map<Number, MediaStreamTracks>}\n\t\tthis._mapIdTrack = new Map();\n\n\t\t// Latest localId.\n\t\t// @type {Number}\n\t\tthis._lastId = 0;\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tthis._stream.addTrack(track);\n\t\tthis._pc.addTrack(track, this._stream);\n\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (track.kind === 'video' && encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tofferMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'video');\n\n\t\t\tsdpPlanBUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\ttrack,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media\n\t\t\t.find((m) => m.type === track.kind);\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 and there is effective simulcast, add scalabilityMode to each\n\t\t// encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\tthis._lastId++;\n\n\t\t// Insert into the map.\n\t\tthis._mapIdTrack.set(this._lastId, track);\n\n\t\treturn { localId: this._lastId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst track = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === track);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tthis._pc.removeTrack(rtpSender);\n\t\tthis._stream.removeTrack(track);\n\t\tthis._mapIdTrack.delete(localId);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\ttry\n\t\t{\n\t\t\tawait this._pc.setLocalDescription(offer);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// NOTE: If there are no sending tracks, setLocalDescription() will fail with\n\t\t\t// \"Failed to create channels\". If so, ignore it.\n\t\t\tif (this._stream.getTracks().length === 0)\n\t\t\t{\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'stopSending() | ignoring expected error due no sending tracks: %s',\n\t\t\t\t\terror.toString());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this._pc.signalingState === 'stable')\n\t\t\treturn;\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst oldTrack = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === oldTrack);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tawait rtpSender.replaceTrack(track);\n\n\t\t// Remove the old track from the local stream.\n\t\tthis._stream.removeTrack(oldTrack);\n\n\t\t// Add the new track to the local stream.\n\t\tthis._stream.addTrack(track);\n\n\t\t// Replace entry in the map.\n\t\tthis._mapIdTrack.set(localId, track);\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst track = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === track);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\treturn rtpSender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n\t\t// Value is an Object with mid, rtpParameters and rtpReceiver.\n\t\t// @type {Map<String, Object>}\n\t\tthis._mapIdRtpParameters = new Map();\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = id;\n\t\tconst mid = kind;\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : localId\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === mid);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst rtpReceiver = this._pc.getReceivers()\n\t\t\t.find((r) => r.track && r.track.id === localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('new RTCRtpReceiver not');\n\n\t\t// Insert into the map.\n\t\tthis._mapIdRtpParameters.set(localId, { mid, rtpParameters, rtpReceiver });\n\n\t\treturn { localId, track: rtpReceiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst { mid, rtpParameters } = this._mapIdRtpParameters.get(localId);\n\n\t\t// Remove from the map.\n\t\tthis._mapIdRtpParameters.delete(localId);\n\n\t\tthis._remoteSdp.planBStopReceiving(\n\t\t\t{ mid, offerRtpParameters: rtpParameters });\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst { rtpReceiver } = this._mapIdRtpParameters.get(localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('associated RTCRtpReceiver not found');\n\n\t\treturn rtpReceiver.getStats();\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Chrome67\n{\n\tstatic get name()\n\t{\n\t\treturn 'Chrome67';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tconst offer = await pc.createOffer(\n\t\t\t\t{\n\t\t\t\t\tofferToReceiveAudio : true,\n\t\t\t\t\tofferToReceiveVideo : true\n\t\t\t\t});\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Chrome67;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Chrome67.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Chrome70.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Chrome70.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpUnifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\nconst parseScalabilityMode = __webpack_require__(/*! ../scalabilityModes */ \"./node_modules/mediasoup-client/lib/scalabilityModes.js\").parse;\n\nconst logger = new Logger('Chrome70');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'unified-plan'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Map of RTCTransceivers indexed by MID.\n\t\t// @type {Map<String, RTCTransceiver>}\n\t\tthis._mapMidTransceiver = new Map();\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tconst transceiver = this._pc.addTransceiver(\n\t\t\ttrack, { direction: 'sendonly', streams: [ this._stream ] });\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling legacy simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\t// We know that our media section is the last one.\n\t\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t\tsdpUnifiedPlanUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\t// Special case for VP9 with SVC.\n\t\tlet hackVp9Svc = false;\n\n\t\tconst layers =\n\t\t\tparseScalabilityMode((encodings || [ {} ])[0].scalabilityMode);\n\n\t\tif (\n\t\t\tencodings &&\n\t\t\tencodings.length === 1 &&\n\t\t\tlayers.spatialLayers > 1 &&\n\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9'\n\t\t)\n\t\t{\n\t\t\tlogger.debug('send() | enabling legacy simulcast for VP9 SVC');\n\n\t\t\thackVp9Svc = true;\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\t// We know that our media section is the last one.\n\t\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t\tsdpUnifiedPlanUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\tnumStreams : layers.spatialLayers\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t// We can now get the transceiver.mid.\n\t\tconst localId = transceiver.mid;\n\n\t\t// Set MID.\n\t\tsendingRtpParameters.mid = localId;\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// Hack for VP9 SVC.\n\t\tif (hackVp9Svc)\n\t\t\tsendingRtpParameters.encodings = [ sendingRtpParameters.encodings[0] ];\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\treturn { localId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\ttransceiver.sender.replaceTrack(null);\n\t\tthis._pc.removeTrack(transceiver.sender);\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tawait transceiver.sender.replaceTrack(track);\n\t}\n\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tconst parameters = transceiver.sender.getParameters();\n\n\t\tparameters.encodings.forEach((encoding, idx) =>\n\t\t{\n\t\t\tif (idx <= spatialLayer)\n\t\t\t\tencoding.active = true;\n\t\t\telse\n\t\t\t\tencoding.active = false;\n\t\t});\n\n\t\tawait transceiver.sender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.sender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// MID value counter. It must be converted to string and incremented for\n\t\t// each new m= section.\n\t\t// @type {Number}\n\t\tthis._nextMid = 0;\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = String(this._nextMid);\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid                : localId,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : id\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === localId);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst transceiver = this._pc.getTransceivers()\n\t\t\t.find((t) => t.mid === localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('new RTCRtpTransceiver not found');\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\t// Increase next MID.\n\t\tthis._nextMid++;\n\n\t\treturn { localId, track: transceiver.receiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.receiver.getStats();\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation();\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Chrome70\n{\n\tstatic get name()\n\t{\n\t\treturn 'Chrome70';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'unified-plan'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tpc.addTransceiver('audio');\n\t\t\tpc.addTransceiver('video');\n\n\t\t\tconst offer = await pc.createOffer();\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Chrome70;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Chrome70.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Chrome74.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Chrome74.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpUnifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\nconst parseScalabilityMode = __webpack_require__(/*! ../scalabilityModes */ \"./node_modules/mediasoup-client/lib/scalabilityModes.js\").parse;\n\nconst logger = new Logger('Chrome74');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'unified-plan'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Map of RTCTransceivers indexed by MID.\n\t\t// @type {Map<String, RTCTransceiver>}\n\t\tthis._mapMidTransceiver = new Map();\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tif (encodings && encodings.length > 1)\n\t\t{\n\t\t\tencodings.forEach((encoding, idx) =>\n\t\t\t{\n\t\t\t\tencoding.rid = `r${idx}`;\n\t\t\t});\n\t\t}\n\n\t\tconst transceiver = this._pc.addTransceiver(\n\t\t\ttrack,\n\t\t\t{\n\t\t\t\tdirection     : 'sendonly',\n\t\t\t\tstreams       : [ this._stream ],\n\t\t\t\tsendEncodings : encodings\n\t\t\t});\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t// Special case for VP9 with SVC.\n\t\tlet hackVp9Svc = false;\n\n\t\tconst layers =\n\t\t\tparseScalabilityMode((encodings || [ {} ])[0].scalabilityMode);\n\n\t\tif (\n\t\t\tencodings &&\n\t\t\tencodings.length === 1 &&\n\t\t\tlayers.spatialLayers > 1 &&\n\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp9'\n\t\t)\n\t\t{\n\t\t\tlogger.debug('send() | enabling legacy simulcast for VP9 SVC');\n\n\t\t\thackVp9Svc = true;\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\t// We know that our media section is the last one.\n\t\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t\tsdpUnifiedPlanUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\tnumStreams : layers.spatialLayers\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t// We can now get the transceiver.mid.\n\t\tconst localId = transceiver.mid;\n\n\t\t// Set MID.\n\t\tsendingRtpParameters.mid = localId;\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings by parsing the SDP offer if no encodings are given.\n\t\tif (!encodings)\n\t\t{\n\t\t\tsendingRtpParameters.encodings =\n\t\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\t\t}\n\t\t// Set RTP encodings by parsing the SDP offer and complete them with given\n\t\t// one if just a single encoding has been given.\n\t\telse if (encodings.length === 1)\n\t\t{\n\t\t\tlet newEncodings =\n\t\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\n\t\t\tObject.assign(newEncodings[0], encodings[0]);\n\n\t\t\t// Hack for VP9 SVC.\n\t\t\tif (hackVp9Svc)\n\t\t\t\tnewEncodings = [ newEncodings[0] ];\n\n\t\t\tsendingRtpParameters.encodings = newEncodings;\n\t\t}\n\t\t// Otherwise if more than 1 encoding are given use them verbatim.\n\t\telse\n\t\t{\n\t\t\tsendingRtpParameters.encodings = encodings;\n\t\t}\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\treturn { localId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\ttransceiver.sender.replaceTrack(null);\n\t\tthis._pc.removeTrack(transceiver.sender);\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tawait transceiver.sender.replaceTrack(track);\n\t}\n\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tconst parameters = transceiver.sender.getParameters();\n\n\t\tparameters.encodings.forEach((encoding, idx) =>\n\t\t{\n\t\t\tif (idx <= spatialLayer)\n\t\t\t\tencoding.active = true;\n\t\t\telse\n\t\t\t\tencoding.active = false;\n\t\t});\n\n\t\tawait transceiver.sender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.sender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// MID value counter. It must be converted to string and incremented for\n\t\t// each new m= section.\n\t\t// @type {Number}\n\t\tthis._nextMid = 0;\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = String(this._nextMid);\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid                : localId,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : id\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === localId);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst transceiver = this._pc.getTransceivers()\n\t\t\t.find((t) => t.mid === localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('new RTCRtpTransceiver not found');\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\t// Increase next MID.\n\t\tthis._nextMid++;\n\n\t\treturn { localId, track: transceiver.receiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.receiver.getStats();\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation();\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Chrome74\n{\n\tstatic get name()\n\t{\n\t\treturn 'Chrome74';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'unified-plan'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tpc.addTransceiver('audio');\n\t\t\tpc.addTransceiver('video');\n\n\t\t\tconst offer = await pc.createOffer();\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Chrome74;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Chrome74.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Edge11.js":
/*!**************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Edge11.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst edgeUtils = __webpack_require__(/*! ./ortc/edgeUtils */ \"./node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js\");\n\nconst logger = new Logger('Edge11');\n\nclass Edge11 extends EnhancedEventEmitter\n{\n\tstatic get name()\n\t{\n\t\treturn 'Edge11';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\treturn edgeUtils.getCapabilities();\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : 0\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints, // eslint-disable-line no-unused-vars\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {Object}\n\t\tthis._sendingRtpParametersByKind =\n\t\t{\n\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t};\n\n\t\t// Transport remote ICE parameters.\n\t\t// @type {RTCIceParameters}\n\t\tthis._remoteIceParameters = iceParameters;\n\n\t\t// Transport remote ICE candidates.\n\t\t// @type {Array<RTCIceCandidate>}\n\t\tthis._remoteIceCandidates = iceCandidates;\n\n\t\t// Transport remote DTLS parameters.\n\t\t// @type {RTCDtlsParameters}\n\t\tthis._remoteDtlsParameters = dtlsParameters;\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// ICE gatherer.\n\t\tthis._iceGatherer = null;\n\n\t\t// ICE transport.\n\t\tthis._iceTransport = null;\n\n\t\t// DTLS transport.\n\t\t// @type {RTCDtlsTransport}\n\t\tthis._dtlsTransport = null;\n\n\t\t// Map of RTCRtpSenders indexed by id.\n\t\t// @type {Map<String, RTCRtpSender}\n\t\tthis._rtpSenders = new Map();\n\n\t\t// Map of RTCRtpReceivers indexed by id.\n\t\t// @type {Map<String, RTCRtpReceiver}\n\t\tthis._rtpReceivers = new Map();\n\n\t\t// Local RTCP CNAME.\n\t\t// @type {String}\n\t\tthis._cname = `CNAME-${utils.generateRandomNumber()}`;\n\n\t\tthis._setIceGatherer({ iceServers, iceTransportPolicy });\n\t\tthis._setIceTransport();\n\t\tthis._setDtlsTransport();\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close the ICE gatherer.\n\t\t// NOTE: Not yet implemented by Edge.\n\t\ttry { this._iceGatherer.close(); }\n\t\tcatch (error) {}\n\n\t\t// Close the ICE transport.\n\t\ttry { this._iceTransport.stop(); }\n\t\tcatch (error) {}\n\n\t\t// Close the DTLS transport.\n\t\ttry { this._dtlsTransport.stop(); }\n\t\tcatch (error) {}\n\n\t\t// Close RTCRtpSenders.\n\t\tfor (const rtpSender of this._rtpSenders.values())\n\t\t{\n\t\t\ttry { rtpSender.stop(); }\n\t\t\tcatch (error) {}\n\t\t}\n\n\t\t// Close RTCRtpReceivers.\n\t\tfor (const rtpReceiver of this._rtpReceivers.values())\n\t\t{\n\t\t\ttry { rtpReceiver.stop(); }\n\t\t\tcatch (error) {}\n\t\t}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._iceTransport.getStats();\n\t}\n\n\tasync send({ track, encodings })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server' });\n\n\t\tlogger.debug('send() | calling new RTCRtpSender()');\n\n\t\tconst rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n\t\tconst rtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\t\tconst useRtx = rtpParameters.codecs\n\t\t\t.some((codec) => /.+\\/rtx$/i.test(codec.mimeType));\n\n\t\tif (!encodings)\n\t\t\tencodings = [ {} ];\n\n\t\tfor (const encoding of encodings)\n\t\t{\n\t\t\tencoding.ssrc = utils.generateRandomNumber();\n\n\t\t\tif (useRtx)\n\t\t\t\tencoding.rtx = { ssrc: utils.generateRandomNumber() };\n\t\t}\n\n\t\trtpParameters.encodings = encodings;\n\n\t\t// Fill RTCRtpParameters.rtcp.\n\t\trtpParameters.rtcp =\n\t\t{\n\t\t\tcname       : this._cname,\n\t\t\treducedSize : true,\n\t\t\tmux         : true\n\t\t};\n\n\t\t// NOTE: Convert our standard RTCRtpParameters into those that Edge\n\t\t// expects.\n\t\tconst edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n\n\t\tlogger.debug(\n\t\t\t'send() | calling rtpSender.send() [params:%o]',\n\t\t\tedgeRtpParameters);\n\n\t\tawait rtpSender.send(edgeRtpParameters);\n\n\t\t// Store it.\n\t\tthis._rtpSenders.set(track.id, rtpSender);\n\n\t\treturn rtpParameters;\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst rtpSender = this._rtpSenders.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('RTCRtpSender not found');\n\n\t\tthis._rtpSenders.delete(localId);\n\n\t\ttry\n\t\t{\n\t\t\tlogger.debug('stopSending() | calling rtpSender.stop()');\n\n\t\t\trtpSender.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.warn('stopSending() | rtpSender.stop() failed:%o', error);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst rtpSender = this._rtpSenders.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('RTCRtpSender not found');\n\n\t\tconst oldTrack = rtpSender.track;\n\n\t\trtpSender.setTrack(track);\n\n\t\t// Replace key.\n\t\tthis._rtpSenders.delete(oldTrack.id);\n\t\tthis._rtpSenders.set(track.id, rtpSender);\n\t}\n\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst rtpSender = this._rtpSenders.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('RTCRtpSender not found');\n\n\t\tconst parameters = rtpSender.getParameters();\n\n\t\tparameters.encodings\n\t\t\t.forEach((encoding, idx) =>\n\t\t\t{\n\t\t\t\tif (idx <= spatialLayer)\n\t\t\t\t\tencoding.active = true;\n\t\t\t\telse\n\t\t\t\t\tencoding.active = false;\n\t\t\t});\n\n\t\tawait rtpSender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst rtpSender = this._rtpSenders.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('RTCRtpSender not found');\n\n\t\treturn rtpSender.getStats();\n\t}\n\n\tasync sendDataChannel()\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server' });\n\n\t\tlogger.debug('receive() | calling new RTCRtpReceiver()');\n\n\t\tconst rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n\n\t\trtpReceiver.addEventListener('error', (event) =>\n\t\t{\n\t\t\tlogger.error('iceGatherer \"error\" event [event:%o]', event);\n\t\t});\n\n\t\t// NOTE: Convert our standard RTCRtpParameters into those that Edge\n\t\t// expects.\n\t\tconst edgeRtpParameters =\n\t\t\tedgeUtils.mangleRtpParameters(rtpParameters);\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling rtpReceiver.receive() [params:%o]',\n\t\t\tedgeRtpParameters);\n\n\t\tawait rtpReceiver.receive(edgeRtpParameters);\n\n\t\tconst localId = id;\n\n\t\t// Store it.\n\t\tthis._rtpReceivers.set(localId, rtpReceiver);\n\n\t\treturn { localId, track: rtpReceiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst rtpReceiver = this._rtpReceivers.get(localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('RTCRtpReceiver not found');\n\n\t\tthis._rtpReceivers.delete(localId);\n\n\t\ttry\n\t\t{\n\t\t\tlogger.debug('stopReceiving() | calling rtpReceiver.stop()');\n\n\t\t\trtpReceiver.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.warn('stopReceiving() | rtpReceiver.stop() failed:%o', error);\n\t\t}\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst rtpReceiver = this._rtpReceivers.get(localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('RTCRtpReceiver not found');\n\n\t\treturn rtpReceiver.getStats();\n\t}\n\n\tasync receiveDataChannel()\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\tthis._remoteIceParameters = iceParameters;\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tlogger.debug('restartIce() | calling iceTransport.start()');\n\n\t\tthis._iceTransport.start(\n\t\t\tthis._iceGatherer, iceParameters, 'controlling');\n\n\t\tfor (const candidate of this._remoteIceCandidates)\n\t\t{\n\t\t\tthis._iceTransport.addRemoteCandidate(candidate);\n\t\t}\n\n\t\tthis._iceTransport.addRemoteCandidate({});\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\t// NOTE: Edge 11 does not implement iceGatherer.gater().\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\t_setIceGatherer({ iceServers, iceTransportPolicy })\n\t{\n\t\tconst iceGatherer = new RTCIceGatherer(\n\t\t\t{\n\t\t\t\ticeServers   : iceServers || [],\n\t\t\t\tgatherPolicy : iceTransportPolicy || 'all'\n\t\t\t});\n\n\t\ticeGatherer.addEventListener('error', (event) =>\n\t\t{\n\t\t\tlogger.error('iceGatherer \"error\" event [event:%o]', event);\n\t\t});\n\n\t\t// NOTE: Not yet implemented by Edge, which starts gathering automatically.\n\t\ttry\n\t\t{\n\t\t\ticeGatherer.gather();\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'_setIceGatherer() | iceGatherer.gather() failed: %s', error.toString());\n\t\t}\n\n\t\tthis._iceGatherer = iceGatherer;\n\t}\n\n\t_setIceTransport()\n\t{\n\t\tconst iceTransport = new RTCIceTransport(this._iceGatherer);\n\n\t\t// NOTE: Not yet implemented by Edge.\n\t\ticeTransport.addEventListener('statechange', () =>\n\t\t{\n\t\t\tswitch (iceTransport.state)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\t// NOTE: Not standard, but implemented by Edge.\n\t\ticeTransport.addEventListener('icestatechange', () =>\n\t\t{\n\t\t\tswitch (iceTransport.state)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\ticeTransport.addEventListener('candidatepairchange', (event) =>\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n\t\t});\n\n\t\tthis._iceTransport = iceTransport;\n\t}\n\n\t_setDtlsTransport()\n\t{\n\t\tconst dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n\n\t\t// NOTE: Not yet implemented by Edge.\n\t\tdtlsTransport.addEventListener('statechange', () =>\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n\t\t});\n\n\t\t// NOTE: Not standard, but implemented by Edge.\n\t\tdtlsTransport.addEventListener('dtlsstatechange', () =>\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n\n\t\t\tif (dtlsTransport.state === 'closed')\n\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t});\n\n\t\tdtlsTransport.addEventListener('error', (event) =>\n\t\t{\n\t\t\tlogger.error('dtlsTransport \"error\" event [event:%o]', event);\n\t\t});\n\n\t\tthis._dtlsTransport = dtlsTransport;\n\t}\n\n\tasync _setupTransport({ localDtlsRole })\n\t{\n\t\tlogger.debug('_setupTransport()');\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters = this._dtlsTransport.getLocalParameters();\n\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\t// Start the RTCIceTransport.\n\t\tthis._iceTransport.start(\n\t\t\tthis._iceGatherer, this._remoteIceParameters, 'controlling');\n\n\t\t// Add remote ICE candidates.\n\t\tfor (const candidate of this._remoteIceCandidates)\n\t\t{\n\t\t\tthis._iceTransport.addRemoteCandidate(candidate);\n\t\t}\n\n\t\t// Also signal a 'complete' candidate as per spec.\n\t\t// NOTE: It should be {complete: true} but Edge prefers {}.\n\t\t// NOTE: If we don't signal end of candidates, the Edge RTCIceTransport\n\t\t// won't enter the 'completed' state.\n\t\tthis._iceTransport.addRemoteCandidate({});\n\n\t\t// NOTE: Edge does not like SHA less than 256.\n\t\tthis._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints\n\t\t\t.filter((fingerprint) =>\n\t\t\t{\n\t\t\t\treturn (\n\t\t\t\t\tfingerprint.algorithm === 'sha-256' ||\n\t\t\t\t\tfingerprint.algorithm === 'sha-384' ||\n\t\t\t\t\tfingerprint.algorithm === 'sha-512'\n\t\t\t\t);\n\t\t\t});\n\n\t\t// Start the RTCDtlsTransport.\n\t\tthis._dtlsTransport.start(this._remoteDtlsParameters);\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nmodule.exports = Edge11;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Edge11.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Firefox60.js":
/*!*****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Firefox60.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpUnifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('Firefox60');\n\nconst SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Map of RTCTransceivers indexed by MID.\n\t\t// @type {Map<String, RTCTransceiver>}\n\t\tthis._mapMidTransceiver = new Map();\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers }) // eslint-disable-line no-unused-vars\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\t// NOTE: Firefox does not implement pc.setConfiguration().\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tlet reverseEncodings;\n\n\t\tif (encodings && encodings.length > 1)\n\t\t{\n\t\t\tencodings.forEach((encoding, idx) =>\n\t\t\t{\n\t\t\t\tencoding.rid = `r${idx}`;\n\t\t\t});\n\n\t\t\t// Clone the encodings and reverse them because Firefox likes them\n\t\t\t// from high to low.\n\t\t\treverseEncodings = utils.clone(encodings).reverse();\n\t\t}\n\n\t\tconst transceiver = this._pc.addTransceiver(\n\t\t\ttrack, { direction: 'sendonly', streams: [ this._stream ] });\n\n\t\t// NOTE: This is not spec compliants. Encodings should be given in addTransceiver\n\t\t// second argument, but Firefox does not support it.\n\t\tif (reverseEncodings)\n\t\t{\n\t\t\tconst parameters = transceiver.sender.getParameters();\n\n\t\t\tparameters.encodings = reverseEncodings;\n\t\t\tawait transceiver.sender.setParameters(parameters);\n\t\t}\n\n\t\tconst offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\t// In Firefox use DTLS role client even if we are the \"offerer\" since\n\t\t// Firefox does not respect ICE-Lite.\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t// We can now get the transceiver.mid.\n\t\tconst localId = transceiver.mid;\n\n\t\t// Set MID.\n\t\tsendingRtpParameters.mid = localId;\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\tconst offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings by parsing the SDP offer if no encodings are given.\n\t\tif (!encodings)\n\t\t{\n\t\t\tsendingRtpParameters.encodings =\n\t\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\t\t}\n\t\t// Set RTP encodings by parsing the SDP offer and complete them with given\n\t\t// one if just a single encoding has been given.\n\t\telse if (encodings.length === 1)\n\t\t{\n\t\t\tconst newEncodings =\n\t\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\n\t\t\tObject.assign(newEncodings[0], encodings[0]);\n\n\t\t\tsendingRtpParameters.encodings = newEncodings;\n\t\t}\n\t\t// Otherwise if more than 1 encoding are given use them verbatim.\n\t\telse\n\t\t{\n\t\t\tsendingRtpParameters.encodings = encodings;\n\t\t}\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\treturn { localId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\ttransceiver.sender.replaceTrack(null);\n\t\tthis._pc.removeTrack(transceiver.sender);\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\tawait transceiver.sender.replaceTrack(track);\n\t}\n\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\tconst parameters = transceiver.sender.getParameters();\n\n\t\t// NOTE: We require encodings given from low to high, however Firefox\n\t\t// requires them in reverse order, so do magic here.\n\t\tspatialLayer = parameters.encodings.length - 1 - spatialLayer;\n\n\t\tparameters.encodings.forEach((encoding, idx) =>\n\t\t{\n\t\t\tif (idx >= spatialLayer)\n\t\t\t\tencoding.active = true;\n\t\t\telse\n\t\t\t\tencoding.active = false;\n\t\t});\n\n\t\tawait transceiver.sender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\treturn transceiver.sender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// MID value counter. It must be converted to string and incremented for\n\t\t// each new m= section.\n\t\t// @type {Number}\n\t\tthis._nextMid = 0;\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = String(this._nextMid);\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid                : localId,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : id\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === localId);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst transceiver = this._pc.getTransceivers()\n\t\t\t.find((t) => t.mid === localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('new transceiver not found');\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\t// Increase next MID.\n\t\tthis._nextMid++;\n\n\t\treturn { localId, track: transceiver.receiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated transceiver not found');\n\n\t\treturn transceiver.receiver.getStats();\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation();\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Firefox60\n{\n\tstatic get name()\n\t{\n\t\treturn 'Firefox60';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t});\n\n\t\t// NOTE: We need to add a real video track to get the RID extension mapping.\n\t\tconst canvas = document.createElement('canvas');\n\n\t\t// NOTE: Otherwise Firefox fails in next line.\n\t\tcanvas.getContext('2d');\n\n\t\tconst fakeStream = canvas.captureStream();\n\t\tconst fakeVideoTrack = fakeStream.getVideoTracks()[0];\n\n\t\ttry\n\t\t{\n\t\t\tpc.addTransceiver('audio', { direction: 'sendrecv' });\n\n\t\t\tconst videoTransceiver =\n\t\t\t\tpc.addTransceiver(fakeVideoTrack, { direction: 'sendrecv' });\n\t\t\tconst parameters = videoTransceiver.sender.getParameters();\n\t\t\tconst encodings =\n\t\t\t[\n\t\t\t\t{ rid: 'r0', maxBitrate: 100000 },\n\t\t\t\t{ rid: 'r1', maxBitrate: 500000 }\n\t\t\t];\n\n\t\t\tparameters.encodings = encodings;\n\t\t\tawait videoTransceiver.sender.setParameters(parameters);\n\n\t\t\tconst offer = await pc.createOffer();\n\n\t\t\ttry { canvas.remove(); }\n\t\t\tcatch (error) {}\n\n\t\t\ttry { fakeVideoTrack.stop(); }\n\t\t\tcatch (error) {}\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { canvas.remove(); }\n\t\t\tcatch (error2) {}\n\n\t\t\ttry { fakeVideoTrack.stop(); }\n\t\t\tcatch (error2) {}\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Firefox60;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Firefox60.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/ReactNative.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/ReactNative.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpPlanBUtils = __webpack_require__(/*! ./sdp/planBUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('ReactNative');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\tplanB : true\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Map of MediaStreamTracks indexed by localId.\n\t\t// @type {Map<Number, MediaStreamTracks>}\n\t\tthis._mapIdTrack = new Map();\n\n\t\t// Latest localId.\n\t\t// @type {Number}\n\t\tthis._lastId = 0;\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tif (!track.streamReactTag)\n\t\t\tthrow new Error('missing track.streamReactTag property');\n\n\t\t// Hack: Create a new stream with track.streamReactTag as id.\n\t\tconst stream = new MediaStream(track.streamReactTag);\n\n\t\tstream.addTrack(track);\n\t\tthis._pc.addStream(stream);\n\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (track.kind === 'video' && encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tofferMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'video');\n\n\t\t\tsdpPlanBUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\ttrack,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tconst offerDesc = new RTCSessionDescription(offer);\n\n\t\tawait this._pc.setLocalDescription(offerDesc);\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media\n\t\t\t.find((m) => m.type === track.kind);\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tconst answerDesc = new RTCSessionDescription(answer);\n\n\t\tawait this._pc.setRemoteDescription(answerDesc);\n\n\t\tthis._lastId++;\n\n\t\t// Insert into the map.\n\t\tthis._mapIdTrack.set(this._lastId, track);\n\n\t\treturn { localId: this._lastId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst track = this._mapIdTrack.get(localId);\n\n\t\tif (!track)\n\t\t\tthrow new Error('track not found');\n\n\t\tthis._mapIdTrack.delete(localId);\n\n\t\t// Hack: Create a new stream with track.streamReactTag as id.\n\t\tconst stream = new MediaStream(track.streamReactTag);\n\n\t\tstream.removeTrack(track);\n\t\tthis._pc.addStream(stream);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\ttry\n\t\t{\n\t\t\tawait this._pc.setLocalDescription(offer);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// NOTE: If there are no sending tracks, setLocalDescription() will fail with\n\t\t\t// \"Failed to create channels\". If so, ignore it.\n\t\t\tif (this._stream.getTracks().length === 0)\n\t\t\t{\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'stopSending() | ignoring expected error due no sending tracks: %s',\n\t\t\t\t\terror.toString());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this._pc.signalingState === 'stable')\n\t\t\treturn;\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tconst answerDesc = new RTCSessionDescription(answer);\n\n\t\tawait this._pc.setRemoteDescription(answerDesc);\n\t}\n\n\tasync replaceTrack({ localId, track }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\tasync getSenderStats({ localId }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tconst answerDesc = new RTCSessionDescription(answer);\n\n\t\tawait this._pc.setRemoteDescription(answerDesc);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n\t\t// Value is an Object with mid and rtpParameters.\n\t\t// @type {Map<String, Object>}\n\t\tthis._mapIdRtpParameters = new Map();\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = id;\n\t\tconst mid = kind;\n\t\tconst streamId = rtpParameters.rtcp.cname;\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId,\n\t\t\t\ttrackId            : localId\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tconst offerDesc = new RTCSessionDescription(offer);\n\n\t\tawait this._pc.setRemoteDescription(offerDesc);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === mid);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tconst answerDesc = new RTCSessionDescription(answer);\n\n\t\tawait this._pc.setLocalDescription(answerDesc);\n\n\t\tconst stream = this._pc.getRemoteStreams()\n\t\t\t.find((s) => s.id === streamId);\n\t\tconst track = stream.getTrackById(localId);\n\n\t\tif (!track)\n\t\t\tthrow new Error('remote track not found');\n\n\t\t// Insert into the map.\n\t\tthis._mapIdRtpParameters.set(localId, { mid, rtpParameters });\n\n\t\t// Hack: Add a streamReactTag property with the reactTag of the MediaStream\n\t\t// generated by react-native-webrtc (this is needed because react-native-webrtc\n\t\t// assumes that we're gonna use the streams generated by it).\n\t\ttrack.streamReactTag = stream.reactTag;\n\n\t\treturn { localId, track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst { mid, rtpParameters } = this._mapIdRtpParameters.get(localId);\n\n\t\t// Remove from the map.\n\t\tthis._mapIdRtpParameters.delete(localId);\n\n\t\tthis._remoteSdp.planBStopReceiving(\n\t\t\t{ mid, offerRtpParameters: rtpParameters });\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tconst offerDesc = new RTCSessionDescription(offer);\n\n\t\tawait this._pc.setRemoteDescription(offerDesc);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId }) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new UnsupportedError('not implemented');\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated        : true,\n\t\t\tid                : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmitTime : maxPacketLifeTime, // NOTE: Old spec.\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tconst offerDesc = new RTCSessionDescription(offer);\n\n\t\tawait this._pc.setRemoteDescription(offerDesc);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass ReactNative\n{\n\tstatic get name()\n\t{\n\t\treturn 'ReactNative';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tconst offer = await pc.createOffer(\n\t\t\t\t{\n\t\t\t\t\tofferToReceiveAudio : true,\n\t\t\t\t\tofferToReceiveVideo : true\n\t\t\t\t});\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = ReactNative;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/ReactNative.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Safari11.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Safari11.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst { UnsupportedError } = __webpack_require__(/*! ../errors */ \"./node_modules/mediasoup-client/lib/errors.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpPlanBUtils = __webpack_require__(/*! ./sdp/planBUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('Safari11');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\tplanB : true\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\n\t\t// Map of MediaStreamTracks indexed by localId.\n\t\t// @type {Map<Number, MediaStreamTracks>}\n\t\tthis._mapIdTrack = new Map();\n\n\t\t// Latest localId.\n\t\t// @type {Number}\n\t\tthis._lastId = 0;\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tthis._stream.addTrack(track);\n\t\tthis._pc.addTrack(track, this._stream);\n\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (track.kind === 'video' && encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tofferMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'video');\n\n\t\t\tsdpPlanBUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\ttrack,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media\n\t\t\t.find((m) => m.type === track.kind);\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\tthis._lastId++;\n\n\t\t// Insert into the map.\n\t\tthis._mapIdTrack.set(this._lastId, track);\n\n\t\treturn { localId: this._lastId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst track = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === track);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tthis._pc.removeTrack(rtpSender);\n\t\tthis._stream.removeTrack(track);\n\t\tthis._mapIdTrack.delete(localId);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\ttry\n\t\t{\n\t\t\tawait this._pc.setLocalDescription(offer);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// NOTE: If there are no sending tracks, setLocalDescription() will fail with\n\t\t\t// \"Failed to create channels\". If so, ignore it.\n\t\t\tif (this._stream.getTracks().length === 0)\n\t\t\t{\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'stopSending() | ignoring expected error due no sending tracks: %s',\n\t\t\t\t\terror.toString());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this._pc.signalingState === 'stable')\n\t\t\treturn;\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst oldTrack = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === oldTrack);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tawait rtpSender.replaceTrack(track);\n\n\t\t// Remove the old track from the local stream.\n\t\tthis._stream.removeTrack(oldTrack);\n\n\t\t// Add the new track to the local stream.\n\t\tthis._stream.addTrack(track);\n\n\t\t// Replace entry in the map.\n\t\tthis._mapIdTrack.set(localId, track);\n\t}\n\n\t// eslint-disable-next-line no-unused-vars\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tthrow new UnsupportedError('not supported');\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst track = this._mapIdTrack.get(localId);\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s) => s.track === track);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\treturn rtpSender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n\t\t// Value is an Object with mid, rtpParameters and rtpReceiver.\n\t\t// @type {Map<String, Object>}\n\t\tthis._mapIdRtpParameters = new Map();\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = id;\n\t\tconst mid = kind;\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : localId\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === mid);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst rtpReceiver = this._pc.getReceivers()\n\t\t\t.find((r) => r.track && r.track.id === localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('new RTCRtpReceiver not');\n\n\t\t// Insert into the map.\n\t\tthis._mapIdRtpParameters.set(localId, { mid, rtpParameters, rtpReceiver });\n\n\t\treturn { localId, track: rtpReceiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst { mid, rtpParameters } = this._mapIdRtpParameters.get(localId);\n\n\t\t// Remove from the map.\n\t\tthis._mapIdRtpParameters.delete(localId);\n\n\t\tthis._remoteSdp.planBStopReceiving(\n\t\t\t{ mid, offerRtpParameters: rtpParameters });\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst { rtpReceiver } = this._mapIdRtpParameters.get(localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('associated RTCRtpReceiver not found');\n\n\t\treturn rtpReceiver.getStats();\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Safari11\n{\n\tstatic get name()\n\t{\n\t\treturn 'Safari11';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tpc.addTransceiver('audio');\n\t\t\tpc.addTransceiver('video');\n\n\t\t\tconst offer = await pc.createOffer();\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Safari11;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Safari11.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/Safari12.js":
/*!****************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/Safari12.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst EnhancedEventEmitter = __webpack_require__(/*! ../EnhancedEventEmitter */ \"./node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\");\nconst utils = __webpack_require__(/*! ../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\nconst ortc = __webpack_require__(/*! ../ortc */ \"./node_modules/mediasoup-client/lib/ortc.js\");\nconst sdpCommonUtils = __webpack_require__(/*! ./sdp/commonUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\");\nconst sdpUnifiedPlanUtils = __webpack_require__(/*! ./sdp/unifiedPlanUtils */ \"./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\");\nconst RemoteSdp = __webpack_require__(/*! ./sdp/RemoteSdp */ \"./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\");\n\nconst logger = new Logger('Safari12');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nclass Handler extends EnhancedEventEmitter\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints\n\t\t}\n\t)\n\t{\n\t\tsuper(logger);\n\n\t\t// Got transport local and remote parameters.\n\t\t// @type {Boolean}\n\t\tthis._transportReady = false;\n\n\t\t// Remote SDP handler.\n\t\t// @type {RemoteSdp}\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters\n\t\t\t});\n\n\t\t// RTCPeerConnection instance.\n\t\t// @type {RTCPeerConnection}\n\t\tthis._pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Map of RTCTransceivers indexed by MID.\n\t\t// @type {Map<String, RTCTransceiver>}\n\t\tthis._mapMidTransceiver = new Map();\n\n\t\t// Whether a DataChannel m=application section has been created.\n\t\t// @type {Boolean}\n\t\tthis._hasDataChannelMediaSection = false;\n\n\t\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\t\t// @type {Number}\n\t\tthis._nextSctpStreamId = 0;\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tclose()\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\ttry { this._pc.close(); }\n\t\tcatch (error) {}\n\t}\n\n\tasync getTransportStats()\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync updateIceServers({ iceServers })\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync _setupTransport({ localDtlsRole, localSdpObject = null })\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n}\n\nclass SendHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRtpParametersByKind = data.sendingRtpParametersByKind;\n\n\t\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t\t// remote answer.\n\t\t// @type {RTCRtpParameters}\n\t\tthis._sendingRemoteRtpParametersByKind = data.sendingRemoteRtpParametersByKind;\n\n\t\t// Local stream.\n\t\t// @type {MediaStream}\n\t\tthis._stream = new MediaStream();\n\t}\n\n\tasync send({ track, encodings, codecOptions })\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tconst transceiver = this._pc.addTransceiver(\n\t\t\ttrack, { direction: 'sendonly', streams: [ this._stream ] });\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind[track.kind]);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling legacy simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\t// We know that our media section is the last one.\n\t\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t\tsdpUnifiedPlanUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t// We can now get the transceiver.mid.\n\t\tconst localId = transceiver.mid;\n\n\t\t// Set MID.\n\t\tsendingRtpParameters.mid = localId;\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 or H264 and there is effective simulcast, add scalabilityMode to\n\t\t// each encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\t(\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8' ||\n\t\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/h264'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : this._sendingRemoteRtpParametersByKind[track.kind],\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\treturn { localId, rtpParameters: sendingRtpParameters };\n\t}\n\n\tasync stopSending({ localId })\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\ttransceiver.sender.replaceTrack(null);\n\t\tthis._pc.removeTrack(transceiver.sender);\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack({ localId, track })\n\t{\n\t\tlogger.debug('replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tawait transceiver.sender.replaceTrack(track);\n\t}\n\n\tasync setMaxSpatialLayer({ localId, spatialLayer })\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tconst parameters = transceiver.sender.getParameters();\n\n\t\tparameters.encodings.forEach((encoding, idx) =>\n\t\t{\n\t\t\tif (idx <= spatialLayer)\n\t\t\t\tencoding.active = true;\n\t\t\telse\n\t\t\t\tencoding.active = false;\n\t\t});\n\n\t\tawait transceiver.sender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.sender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t})\n\t{\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : this._nextSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSctpStreamId = ++this._nextSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n}\n\nclass RecvHandler extends Handler\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\t// MID value counter. It must be converted to string and incremented for\n\t\t// each new m= section.\n\t\t// @type {Number}\n\t\tthis._nextMid = 0;\n\t}\n\n\tasync receive({ id, kind, rtpParameters })\n\t{\n\t\tlogger.debug('receive() [id:%s, kind:%s]', id, kind);\n\n\t\tconst localId = String(this._nextMid);\n\n\t\tthis._remoteSdp.receive(\n\t\t\t{\n\t\t\t\tmid                : localId,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp.cname,\n\t\t\t\ttrackId            : id\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m) => String(m.mid) === localId);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst transceiver = this._pc.getTransceivers()\n\t\t\t.find((t) => t.mid === localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('new RTCRtpTransceiver not found');\n\n\t\t// Store in the map.\n\t\tthis._mapMidTransceiver.set(localId, transceiver);\n\n\t\t// Increase next MID.\n\t\tthis._nextMid++;\n\n\t\treturn { localId, track: transceiver.receiver.track };\n\t}\n\n\tasync stopReceiving({ localId })\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\tthis._remoteSdp.disableMediaSection(transceiver.mid);\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync receiveDataChannel({ sctpStreamParameters, label, protocol })\n\t{\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('DataChannel options:%o', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp.receiveSctpAssociation();\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]', answer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tasync getReceiverStats({ localId })\n\t{\n\t\tconst transceiver = this._mapMidTransceiver.get(localId);\n\n\t\tif (!transceiver)\n\t\t\tthrow new Error('associated RTCRtpTransceiver not found');\n\n\t\treturn transceiver.receiver.getStats();\n\t}\n\n\tasync restartIce({ iceParameters })\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]', offer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]', answer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n}\n\nclass Safari12\n{\n\tstatic get name()\n\t{\n\t\treturn 'Safari12';\n\t}\n\n\tstatic async getNativeRtpCapabilities()\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new RTCPeerConnection(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tpc.addTransceiver('audio');\n\t\t\tpc.addTransceiver('video');\n\n\t\t\tconst offer = await pc.createOffer();\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tstatic async getNativeSctpCapabilities()\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}\n\t)\n\t{\n\t\tlogger.debug('constructor() [direction:%s]', direction);\n\n\t\tswitch (direction)\n\t\t{\n\t\t\tcase 'send':\n\t\t\t{\n\t\t\t\tconst sendingRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\tconst sendingRemoteRtpParametersByKind =\n\t\t\t\t{\n\t\t\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t\t\t};\n\n\t\t\t\treturn new SendHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints,\n\t\t\t\t\t\tsendingRtpParametersByKind,\n\t\t\t\t\t\tsendingRemoteRtpParametersByKind\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'recv':\n\t\t\t{\n\t\t\t\treturn new RecvHandler(\n\t\t\t\t\t{\n\t\t\t\t\t\ticeParameters,\n\t\t\t\t\t\ticeCandidates,\n\t\t\t\t\t\tdtlsParameters,\n\t\t\t\t\t\tsctpParameters,\n\t\t\t\t\t\ticeServers,\n\t\t\t\t\t\ticeTransportPolicy,\n\t\t\t\t\t\tproprietaryConstraints\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Safari12;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/Safari12.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const utils = __webpack_require__(/*! ../../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\n\n/**\n * Normalize Edge's RTCRtpReceiver.getCapabilities() to produce a full\n * compliant ORTC RTCRtpCapabilities.\n *\n * @returns {RTCRtpCapabilities}\n */\nexports.getCapabilities = function()\n{\n\tconst nativeCaps = RTCRtpReceiver.getCapabilities();\n\tconst caps = utils.clone(nativeCaps);\n\n\tfor (const codec of caps.codecs)\n\t{\n\t\t// Rename numChannels to channels.\n\t\tcodec.channels = codec.numChannels;\n\t\tdelete codec.numChannels;\n\n\t\t// Normalize channels.\n\t\tif (codec.kind !== 'audio')\n\t\t\tdelete codec.channels;\n\t\telse if (!codec.channels)\n\t\t\tcodec.channels = 1;\n\n\t\t// Add mimeType.\n\t\tcodec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;\n\n\t\t// NOTE: Edge sets some numeric parameters as String rather than Number. Fix them.\n\t\tif (codec.parameters)\n\t\t{\n\t\t\tconst parameters = codec.parameters;\n\n\t\t\tif (parameters.apt)\n\t\t\t\tparameters.apt = Number(parameters.apt);\n\n\t\t\tif (parameters['packetization-mode'])\n\t\t\t\tparameters['packetization-mode'] = Number(parameters['packetization-mode']);\n\t\t}\n\n\t\t// Delete emty parameter String in rtcpFeedback.\n\t\tfor (const feedback of codec.rtcpFeedback || [])\n\t\t{\n\t\t\tif (!feedback.parameter)\n\t\t\t\tdelete feedback.parameter;\n\t\t}\n\t}\n\n\treturn caps;\n};\n\n/**\n * Generate RTCRtpParameters as Edge like them.\n *\n * @param  {RTCRtpParameters} rtpParameters\n * @returns {RTCRtpParameters}\n */\nexports.mangleRtpParameters = function(rtpParameters)\n{\n\tconst params = utils.clone(rtpParameters);\n\n\t// Rename mid to muxId.\n\tif (params.mid)\n\t{\n\t\tparams.muxId = params.mid;\n\t\tdelete params.mid;\n\t}\n\n\tfor (const codec of params.codecs)\n\t{\n\t\t// Rename channels to numChannels.\n\t\tif (codec.channels)\n\t\t{\n\t\t\tcodec.numChannels = codec.channels;\n\t\t\tdelete codec.channels;\n\t\t}\n\n\t\t// Remove mimeType.\n\t\tdelete codec.mimeType;\n\t}\n\n\treturn params;\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js":
/*!************************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const utils = __webpack_require__(/*! ../../utils */ \"./node_modules/mediasoup-client/lib/utils.js\");\n\nclass MediaSection\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters = undefined,\n\t\t\ticeCandidates = undefined,\n\t\t\tdtlsParameters = undefined,\n\t\t\tplanB = false\n\t\t} = {}\n\t)\n\t{\n\t\t// SDP media object.\n\t\t// @type {Object}\n\t\tthis._mediaObject = {};\n\n\t\t// Whether this is Plan-B SDP.\n\t\t// @type {Boolean}\n\t\tthis._planB = planB;\n\n\t\tif (iceParameters)\n\t\t{\n\t\t\tthis.setIceParameters(iceParameters);\n\t\t}\n\n\t\tif (iceCandidates)\n\t\t{\n\t\t\tthis._mediaObject.candidates = [];\n\n\t\t\tfor (const candidate of iceCandidates)\n\t\t\t{\n\t\t\t\tconst candidateObject = {};\n\n\t\t\t\t// mediasoup does mandates rtcp-mux so candidates component is always\n\t\t\t\t// RTP (1).\n\t\t\t\tcandidateObject.component = 1;\n\t\t\t\tcandidateObject.foundation = candidate.foundation;\n\t\t\t\tcandidateObject.ip = candidate.ip;\n\t\t\t\tcandidateObject.port = candidate.port;\n\t\t\t\tcandidateObject.priority = candidate.priority;\n\t\t\t\tcandidateObject.transport = candidate.protocol;\n\t\t\t\tcandidateObject.type = candidate.type;\n\t\t\t\tif (candidate.tcpType)\n\t\t\t\t\tcandidateObject.tcptype = candidate.tcpType;\n\n\t\t\t\tthis._mediaObject.candidates.push(candidateObject);\n\t\t\t}\n\n\t\t\tthis._mediaObject.endOfCandidates = 'end-of-candidates';\n\t\t\tthis._mediaObject.iceOptions = 'renomination';\n\t\t}\n\n\t\tif (dtlsParameters)\n\t\t{\n\t\t\tthis.setDtlsRole(dtlsParameters.role);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {String}\n\t */\n\tget mid()\n\t{\n\t\treturn this._mediaObject.mid;\n\t}\n\n\t/**\n\t * @returns {Object}\n\t */\n\tgetObject()\n\t{\n\t\treturn this._mediaObject;\n\t}\n\n\t/**\n\t * @param {RTCIceParameters} iceParameters\n\t */\n\tsetIceParameters(iceParameters)\n\t{\n\t\tthis._mediaObject.iceUfrag = iceParameters.usernameFragment;\n\t\tthis._mediaObject.icePwd = iceParameters.password;\n\t}\n\n\tdisable()\n\t{\n\t\tthis._mediaObject.direction = 'inactive';\n\n\t\tdelete this._mediaObject.ext;\n\t\tdelete this._mediaObject.ssrcs;\n\t\tdelete this._mediaObject.ssrcGroups;\n\t\tdelete this._mediaObject.simulcast;\n\t\tdelete this._mediaObject.simulcast_03;\n\t\tdelete this._mediaObject.rids;\n\t}\n}\n\nclass AnswerMediaSection extends MediaSection\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\tconst {\n\t\t\tsctpParameters,\n\t\t\tofferMediaObject,\n\t\t\tofferRtpParameters,\n\t\t\tanswerRtpParameters,\n\t\t\tplainRtpParameters,\n\t\t\tcodecOptions\n\t\t} = data;\n\n\t\tthis._mediaObject.mid = String(offerMediaObject.mid);\n\t\tthis._mediaObject.type = offerMediaObject.type;\n\t\tthis._mediaObject.protocol = offerMediaObject.protocol;\n\n\t\tif (!plainRtpParameters)\n\t\t{\n\t\t\tthis._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n\t\t\tthis._mediaObject.port = 7;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._mediaObject.connection =\n\t\t\t{\n\t\t\t\tip      : plainRtpParameters.ip,\n\t\t\t\tversion : plainRtpParameters.ipVersion\n\t\t\t};\n\t\t\tthis._mediaObject.port = plainRtpParameters.port;\n\t\t}\n\n\t\tswitch (offerMediaObject.type)\n\t\t{\n\t\t\tcase 'audio':\n\t\t\tcase 'video':\n\t\t\t{\n\t\t\t\tthis._mediaObject.direction = 'recvonly';\n\t\t\t\tthis._mediaObject.rtp = [];\n\t\t\t\tthis._mediaObject.rtcpFb = [];\n\t\t\t\tthis._mediaObject.fmtp = [];\n\n\t\t\t\tfor (const codec of answerRtpParameters.codecs)\n\t\t\t\t{\n\t\t\t\t\tconst rtp =\n\t\t\t\t\t{\n\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\tcodec   : codec.mimeType.replace(/^.*\\//, ''),\n\t\t\t\t\t\trate    : codec.clockRate\n\t\t\t\t\t};\n\n\t\t\t\t\tif (codec.channels > 1)\n\t\t\t\t\t\trtp.encoding = codec.channels;\n\n\t\t\t\t\tthis._mediaObject.rtp.push(rtp);\n\n\t\t\t\t\tconst codecParameters = utils.clone(codec.parameters || {});\n\n\t\t\t\t\tif (codecOptions)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\topusStereo,\n\t\t\t\t\t\t\topusFec,\n\t\t\t\t\t\t\topusDtx,\n\t\t\t\t\t\t\topusMaxPlaybackRate,\n\t\t\t\t\t\t\tvideoGoogleStartBitrate,\n\t\t\t\t\t\t\tvideoGoogleMaxBitrate,\n\t\t\t\t\t\t\tvideoGoogleMinBitrate\n\t\t\t\t\t\t} = codecOptions;\n\n\t\t\t\t\t\tconst offerCodec = offerRtpParameters.codecs\n\t\t\t\t\t\t\t.find((c) => c.payloadType === codec.payloadType);\n\n\t\t\t\t\t\tswitch (codec.mimeType.toLowerCase())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'audio/opus':\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (opusStereo !== undefined)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tofferCodec.parameters['sprop-stereo'] = opusStereo ? 1 : 0;\n\t\t\t\t\t\t\t\t\tcodecParameters.stereo = opusStereo ? 1 : 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (opusFec !== undefined)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tofferCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n\t\t\t\t\t\t\t\t\tcodecParameters.useinbandfec = opusFec ? 1 : 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (opusDtx !== undefined)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tofferCodec.parameters.usedtx = opusDtx ? 1 : 0;\n\t\t\t\t\t\t\t\t\tcodecParameters.usedtx = opusDtx ? 1 : 0;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (opusMaxPlaybackRate !== undefined)\n\t\t\t\t\t\t\t\t\tcodecParameters.maxplaybackrate = opusMaxPlaybackRate;\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcase 'video/vp8':\n\t\t\t\t\t\t\tcase 'video/vp9':\n\t\t\t\t\t\t\tcase 'video/h264':\n\t\t\t\t\t\t\tcase 'video/h265':\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (videoGoogleStartBitrate !== undefined)\n\t\t\t\t\t\t\t\t\tcodecParameters['x-google-start-bitrate'] = videoGoogleStartBitrate;\n\n\t\t\t\t\t\t\t\tif (videoGoogleMaxBitrate !== undefined)\n\t\t\t\t\t\t\t\t\tcodecParameters['x-google-max-bitrate'] = videoGoogleMaxBitrate;\n\n\t\t\t\t\t\t\t\tif (videoGoogleMinBitrate !== undefined)\n\t\t\t\t\t\t\t\t\tcodecParameters['x-google-min-bitrate'] = videoGoogleMinBitrate;\n\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fmtp =\n\t\t\t\t\t{\n\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\tconfig  : ''\n\t\t\t\t\t};\n\n\t\t\t\t\tfor (const key of Object.keys(codecParameters))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (fmtp.config)\n\t\t\t\t\t\t\tfmtp.config += ';';\n\n\t\t\t\t\t\tfmtp.config += `${key}=${codecParameters[key]}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fmtp.config)\n\t\t\t\t\t\tthis._mediaObject.fmtp.push(fmtp);\n\n\t\t\t\t\tif (codec.rtcpFeedback)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const fb of codec.rtcpFeedback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._mediaObject.rtcpFb.push(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\t\t\t\ttype    : fb.type,\n\t\t\t\t\t\t\t\t\tsubtype : fb.parameter || ''\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._mediaObject.payloads = answerRtpParameters.codecs\n\t\t\t\t\t.map((codec) => codec.payloadType)\n\t\t\t\t\t.join(' ');\n\n\t\t\t\tthis._mediaObject.ext = [];\n\n\t\t\t\tfor (const ext of answerRtpParameters.headerExtensions)\n\t\t\t\t{\n\t\t\t\t\t// Don't add a header extension if not present in the offer.\n\t\t\t\t\tconst found = (offerMediaObject.ext || [])\n\t\t\t\t\t\t.some((localExt) => localExt.uri === ext.uri);\n\n\t\t\t\t\tif (!found)\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tthis._mediaObject.ext.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turi   : ext.uri,\n\t\t\t\t\t\t\tvalue : ext.id\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Simulcast.\n\t\t\t\tif (offerMediaObject.simulcast)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.simulcast =\n\t\t\t\t\t{\n\t\t\t\t\t\tdir1  : 'recv',\n\t\t\t\t\t\tlist1 : offerMediaObject.simulcast.list1\n\t\t\t\t\t};\n\n\t\t\t\t\tthis._mediaObject.rids = [];\n\n\t\t\t\t\tfor (const rid of offerMediaObject.rids || [])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (rid.direction !== 'send')\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tthis._mediaObject.rids.push(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid        : rid.id,\n\t\t\t\t\t\t\t\tdirection : 'recv'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Simulcast (draft version 03).\n\t\t\t\telse if (offerMediaObject.simulcast_03)\n\t\t\t\t{\n\t\t\t\t\t// eslint-disable-next-line camelcase\n\t\t\t\t\tthis._mediaObject.simulcast_03 =\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue : offerMediaObject.simulcast_03.value.replace(/send/g, 'recv')\n\t\t\t\t\t};\n\n\t\t\t\t\tthis._mediaObject.rids = [];\n\n\t\t\t\t\tfor (const rid of offerMediaObject.rids || [])\n\t\t\t\t\t{\n\t\t\t\t\t\tif (rid.direction !== 'send')\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\tthis._mediaObject.rids.push(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid        : rid.id,\n\t\t\t\t\t\t\t\tdirection : 'recv'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._mediaObject.rtcpMux = 'rtcp-mux';\n\t\t\t\tthis._mediaObject.rtcpRsize = 'rtcp-rsize';\n\n\t\t\t\tif (this._planB && this._mediaObject.type === 'video')\n\t\t\t\t\tthis._mediaObject.xGoogleFlag = 'conference';\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'application':\n\t\t\t{\n\t\t\t\t// New spec.\n\t\t\t\tif (typeof offerMediaObject.sctpPort === 'number')\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.payloads = 'webrtc-datachannel';\n\t\t\t\t\tthis._mediaObject.sctpPort = sctpParameters.port;\n\t\t\t\t\tthis._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n\t\t\t\t}\n\t\t\t\t// Old spec.\n\t\t\t\telse if (offerMediaObject.sctpmap)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.payloads = sctpParameters.port;\n\t\t\t\t\tthis._mediaObject.sctpmap =\n\t\t\t\t\t{\n\t\t\t\t\t\tapp            : 'webrtc-datachannel',\n\t\t\t\t\t\tsctpmapNumber  : sctpParameters.port,\n\t\t\t\t\t\tmaxMessageSize : sctpParameters.maxMessageSize\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {String} role\n\t */\n\tsetDtlsRole(role)\n\t{\n\t\tswitch (role)\n\t\t{\n\t\t\tcase 'client':\n\t\t\t\tthis._mediaObject.setup = 'active';\n\t\t\t\tbreak;\n\t\t\tcase 'server':\n\t\t\t\tthis._mediaObject.setup = 'passive';\n\t\t\t\tbreak;\n\t\t\tcase 'auto':\n\t\t\t\tthis._mediaObject.setup = 'actpass';\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nclass OfferMediaSection extends MediaSection\n{\n\tconstructor(data)\n\t{\n\t\tsuper(data);\n\n\t\tconst {\n\t\t\tsctpParameters,\n\t\t\tplainRtpParameters,\n\t\t\tmid,\n\t\t\tkind,\n\t\t\tofferRtpParameters,\n\t\t\tstreamId,\n\t\t\ttrackId,\n\t\t\toldDataChannelSpec\n\t\t} = data;\n\n\t\tthis._mediaObject.mid = String(mid);\n\t\tthis._mediaObject.type = kind;\n\n\t\tif (!plainRtpParameters)\n\t\t{\n\t\t\tthis._mediaObject.connection = { ip: '127.0.0.1', version: 4 };\n\n\t\t\tif (!sctpParameters)\n\t\t\t\tthis._mediaObject.protocol = 'UDP/TLS/RTP/SAVPF';\n\t\t\telse\n\t\t\t\tthis._mediaObject.protocol = 'UDP/DTLS/SCTP';\n\n\t\t\tthis._mediaObject.port = 7;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._mediaObject.connection =\n\t\t\t{\n\t\t\t\tip      : plainRtpParameters.ip,\n\t\t\t\tversion : plainRtpParameters.ipVersion\n\t\t\t};\n\t\t\tthis._mediaObject.protocol = 'RTP/AVP';\n\t\t\tthis._mediaObject.port = plainRtpParameters.port;\n\t\t}\n\n\t\tswitch (kind)\n\t\t{\n\t\t\tcase 'audio':\n\t\t\tcase 'video':\n\t\t\t{\n\t\t\t\tthis._mediaObject.direction = 'sendonly';\n\t\t\t\tthis._mediaObject.rtp = [];\n\t\t\t\tthis._mediaObject.rtcpFb = [];\n\t\t\t\tthis._mediaObject.fmtp = [];\n\n\t\t\t\tif (!this._planB)\n\t\t\t\t\tthis._mediaObject.msid = `${streamId || '-'} ${trackId}`;\n\n\t\t\t\tfor (const codec of offerRtpParameters.codecs)\n\t\t\t\t{\n\t\t\t\t\tconst rtp =\n\t\t\t\t\t{\n\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\tcodec   : codec.mimeType.replace(/^.*\\//, ''),\n\t\t\t\t\t\trate    : codec.clockRate\n\t\t\t\t\t};\n\n\t\t\t\t\tif (codec.channels > 1)\n\t\t\t\t\t\trtp.encoding = codec.channels;\n\n\t\t\t\t\tthis._mediaObject.rtp.push(rtp);\n\n\t\t\t\t\tif (codec.parameters)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst fmtp =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\t\tconfig  : ''\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tfor (const key of Object.keys(codec.parameters))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (fmtp.config)\n\t\t\t\t\t\t\t\tfmtp.config += ';';\n\n\t\t\t\t\t\t\tfmtp.config += `${key}=${codec.parameters[key]}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fmtp.config)\n\t\t\t\t\t\t\tthis._mediaObject.fmtp.push(fmtp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (codec.rtcpFeedback)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (const fb of codec.rtcpFeedback)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._mediaObject.rtcpFb.push(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpayload : codec.payloadType,\n\t\t\t\t\t\t\t\t\ttype    : fb.type,\n\t\t\t\t\t\t\t\t\tsubtype : fb.parameter || ''\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._mediaObject.payloads = offerRtpParameters.codecs\n\t\t\t\t\t.map((codec) => codec.payloadType)\n\t\t\t\t\t.join(' ');\n\n\t\t\t\tthis._mediaObject.ext = [];\n\n\t\t\t\tfor (const ext of offerRtpParameters.headerExtensions)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.ext.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\turi   : ext.uri,\n\t\t\t\t\t\t\tvalue : ext.id\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._mediaObject.rtcpMux = 'rtcp-mux';\n\t\t\t\tthis._mediaObject.rtcpRsize = 'rtcp-rsize';\n\n\t\t\t\tconst encoding = offerRtpParameters.encodings[0];\n\t\t\t\tconst ssrc = encoding.ssrc;\n\t\t\t\tconst rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n\t\t\t\t\t? encoding.rtx.ssrc\n\t\t\t\t\t: undefined;\n\n\t\t\t\tthis._mediaObject.ssrcs = [];\n\t\t\t\tthis._mediaObject.ssrcGroups = [];\n\n\t\t\t\tif (offerRtpParameters.rtcp.cname)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid        : ssrc,\n\t\t\t\t\t\t\tattribute : 'cname',\n\t\t\t\t\t\t\tvalue     : offerRtpParameters.rtcp.cname\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (this._planB)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid        : ssrc,\n\t\t\t\t\t\t\tattribute : 'msid',\n\t\t\t\t\t\t\tvalue     : `${streamId || '-'} ${trackId}`\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (rtxSsrc)\n\t\t\t\t{\n\t\t\t\t\tif (offerRtpParameters.rtcp.cname)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid        : rtxSsrc,\n\t\t\t\t\t\t\t\tattribute : 'cname',\n\t\t\t\t\t\t\t\tvalue     : offerRtpParameters.rtcp.cname\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._planB)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid        : rtxSsrc,\n\t\t\t\t\t\t\t\tattribute : 'msid',\n\t\t\t\t\t\t\t\tvalue     : `${streamId || '-'} ${trackId}`\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Associate original and retransmission SSRCs.\n\t\t\t\t\tthis._mediaObject.ssrcGroups.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsemantics : 'FID',\n\t\t\t\t\t\t\tssrcs     : `${ssrc} ${rtxSsrc}`\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'application':\n\t\t\t{\n\t\t\t\t// New spec.\n\t\t\t\tif (!oldDataChannelSpec)\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.payloads = 'webrtc-datachannel';\n\t\t\t\t\tthis._mediaObject.sctpPort = sctpParameters.port;\n\t\t\t\t\tthis._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n\t\t\t\t}\n\t\t\t\t// Old spec.\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis._mediaObject.payloads = sctpParameters.port;\n\t\t\t\t\tthis._mediaObject.sctpmap =\n\t\t\t\t\t{\n\t\t\t\t\t\tapp            : 'webrtc-datachannel',\n\t\t\t\t\t\tsctpmapNumber  : sctpParameters.port,\n\t\t\t\t\t\tmaxMessageSize : sctpParameters.maxMessageSize\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {String} role\n\t */\n\tsetDtlsRole(role) // eslint-disable-line no-unused-vars\n\t{\n\t\t// Always 'actpass'.\n\t\tthis._mediaObject.setup = 'actpass';\n\t}\n\n\tplanBReceive({ offerRtpParameters, streamId, trackId })\n\t{\n\t\tconst encoding = offerRtpParameters.encodings[0];\n\t\tconst ssrc = encoding.ssrc;\n\t\tconst rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n\t\t\t? encoding.rtx.ssrc\n\t\t\t: undefined;\n\n\t\tif (offerRtpParameters.rtcp.cname)\n\t\t{\n\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t{\n\t\t\t\t\tid        : ssrc,\n\t\t\t\t\tattribute : 'cname',\n\t\t\t\t\tvalue     : offerRtpParameters.rtcp.cname\n\t\t\t\t});\n\t\t}\n\n\t\tthis._mediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : ssrc,\n\t\t\t\tattribute : 'msid',\n\t\t\t\tvalue     : `${streamId || '-'} ${trackId}`\n\t\t\t});\n\n\t\tif (rtxSsrc)\n\t\t{\n\t\t\tif (offerRtpParameters.rtcp.cname)\n\t\t\t{\n\t\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tid        : rtxSsrc,\n\t\t\t\t\t\tattribute : 'cname',\n\t\t\t\t\t\tvalue     : offerRtpParameters.rtcp.cname\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._mediaObject.ssrcs.push(\n\t\t\t\t{\n\t\t\t\t\tid        : rtxSsrc,\n\t\t\t\t\tattribute : 'msid',\n\t\t\t\t\tvalue     : `${streamId || '-'} ${trackId}`\n\t\t\t\t});\n\n\t\t\t// Associate original and retransmission SSRCs.\n\t\t\tthis._mediaObject.ssrcGroups.push(\n\t\t\t\t{\n\t\t\t\t\tsemantics : 'FID',\n\t\t\t\t\tssrcs     : `${ssrc} ${rtxSsrc}`\n\t\t\t\t});\n\t\t}\n\t}\n\n\tplanBStopReceiving({ offerRtpParameters })\n\t{\n\t\tconst encoding = offerRtpParameters.encodings[0];\n\t\tconst ssrc = encoding.ssrc;\n\t\tconst rtxSsrc = (encoding.rtx && encoding.rtx.ssrc)\n\t\t\t? encoding.rtx.ssrc\n\t\t\t: undefined;\n\n\t\tthis._mediaObject.ssrcs = this._mediaObject.ssrcs\n\t\t\t.filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n\n\t\tif (rtxSsrc)\n\t\t{\n\t\t\tthis._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups\n\t\t\t\t.filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n\t\t}\n\t}\n}\n\nmodule.exports =\n{\n\tAnswerMediaSection,\n\tOfferMediaSection\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js":
/*!*********************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\nconst Logger = __webpack_require__(/*! ../../Logger */ \"./node_modules/mediasoup-client/lib/Logger.js\");\nconst { AnswerMediaSection, OfferMediaSection } = __webpack_require__(/*! ./MediaSection */ \"./node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js\");\n\nconst logger = new Logger('RemoteSdp');\n\nclass RemoteSdp\n{\n\tconstructor(\n\t\t{\n\t\t\ticeParameters = undefined,\n\t\t\ticeCandidates = undefined,\n\t\t\tdtlsParameters = undefined,\n\t\t\tsctpParameters = undefined,\n\t\t\tplainRtpParameters = undefined,\n\t\t\tplanB = false\n\t\t})\n\t{\n\t\t// Remote ICE parameters.\n\t\t// @type {RTCIceParameters}\n\t\tthis._iceParameters = iceParameters;\n\n\t\t// Remote ICE candidates.\n\t\t// @type {Array<RTCIceCandidate>}\n\t\tthis._iceCandidates = iceCandidates;\n\n\t\t// Remote DTLS parameters.\n\t\t// @type {RTCDtlsParameters}\n\t\tthis._dtlsParameters = dtlsParameters;\n\n\t\t// Remote SCTP parameters.\n\t\t// @type {RTCSctpParameters}\n\t\tthis._sctpParameters = sctpParameters;\n\n\t\t// Parameters for plain RTP (no SRTP nor DTLS no BUNDLE). Fields:\n\t\t// @type {Object}\n\t\t//\n\t\t// Fields:\n\t\t// @param {String} ip\n\t\t// @param {Number} ipVersion - 4 or 6.\n\t\t// @param {Number} port\n\t\tthis._plainRtpParameters = plainRtpParameters;\n\n\t\t// Whether this is Plan-B SDP.\n\t\t// @type {Boolean}\n\t\tthis._planB = planB;\n\n\t\t// MediaSection instances indexed by MID.\n\t\t// @type {Map<String, MediaSection>}\n\t\tthis._mediaSections = new Map();\n\n\t\t// SDP object.\n\t\t// @type {Object}\n\t\tthis._sdpObject =\n\t\t{\n\t\t\tversion : 0,\n\t\t\torigin  :\n\t\t\t{\n\t\t\t\taddress        : '0.0.0.0',\n\t\t\t\tipVer          : 4,\n\t\t\t\tnetType        : 'IN',\n\t\t\t\tsessionId      : 10000,\n\t\t\t\tsessionVersion : 0,\n\t\t\t\tusername       : 'mediasoup-client'\n\t\t\t},\n\t\t\tname   : '-',\n\t\t\ttiming : { start: 0, stop: 0 },\n\t\t\tmedia  : []\n\t\t};\n\n\t\t// If ICE parameters are given, add ICE-Lite indicator.\n\t\tif (iceParameters && iceParameters.iceLite)\n\t\t{\n\t\t\tthis._sdpObject.icelite = 'ice-lite';\n\t\t}\n\n\t\t// If DTLS parameters are given assume WebRTC and BUNDLE.\n\t\tif (dtlsParameters)\n\t\t{\n\t\t\tthis._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n\n\t\t\t// NOTE: We take the latest fingerprint.\n\t\t\tconst numFingerprints = this._dtlsParameters.fingerprints.length;\n\n\t\t\tthis._sdpObject.fingerprint =\n\t\t\t{\n\t\t\t\ttype : dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n\t\t\t\thash : dtlsParameters.fingerprints[numFingerprints - 1].value\n\t\t\t};\n\n\t\t\tthis._sdpObject.groups = [ { type: 'BUNDLE', mids: '' } ];\n\t\t}\n\n\t\t// If there are plain parameters override SDP origin.\n\t\tif (plainRtpParameters)\n\t\t{\n\t\t\tthis._sdpObject.origin.address = plainRtpParameters.ip;\n\t\t\tthis._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n\t\t}\n\t}\n\n\tupdateIceParameters(iceParameters)\n\t{\n\t\tlogger.debug(\n\t\t\t'updateIceParameters() [iceParameters:%o]',\n\t\t\ticeParameters);\n\n\t\tthis._iceParameters = iceParameters;\n\t\tthis._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n\n\t\tfor (const mediaSection of this._mediaSections.values())\n\t\t{\n\t\t\tmediaSection.setIceParameters(iceParameters);\n\t\t}\n\t}\n\n\tupdateDtlsRole(role)\n\t{\n\t\tlogger.debug('updateDtlsRole() [role:%s]', role);\n\n\t\tthis._dtlsParameters.role = role;\n\n\t\tfor (const mediaSection of this._mediaSections.values())\n\t\t{\n\t\t\tmediaSection.setDtlsRole(role);\n\t\t}\n\t}\n\n\tsend(\n\t\t{\n\t\t\tofferMediaObject,\n\t\t\tofferRtpParameters,\n\t\t\tanswerRtpParameters,\n\t\t\tcodecOptions\n\t\t}\n\t)\n\t{\n\t\tconst mediaSection = new AnswerMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tplanB              : this._planB,\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters,\n\t\t\t\tanswerRtpParameters,\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\t// Unified-Plan or different media kind.\n\t\tif (!this._mediaSections.has(mediaSection.mid))\n\t\t{\n\t\t\tthis._addMediaSection(mediaSection);\n\t\t}\n\t\t// Plan-B.\n\t\telse\n\t\t{\n\t\t\tthis._replaceMediaSection(mediaSection);\n\t\t}\n\t}\n\n\treceive(\n\t\t{\n\t\t\tmid,\n\t\t\tkind,\n\t\t\tofferRtpParameters,\n\t\t\tstreamId,\n\t\t\ttrackId\n\t\t}\n\t)\n\t{\n\t\t// Unified-Plan or different media kind.\n\t\tif (!this._mediaSections.has(mid))\n\t\t{\n\t\t\tconst mediaSection = new OfferMediaSection(\n\t\t\t\t{\n\t\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\t\tplanB              : this._planB,\n\t\t\t\t\tmid,\n\t\t\t\t\tkind,\n\t\t\t\t\tofferRtpParameters,\n\t\t\t\t\tstreamId,\n\t\t\t\t\ttrackId\n\t\t\t\t});\n\n\t\t\tthis._addMediaSection(mediaSection);\n\t\t}\n\t\t// Plan-B.\n\t\telse\n\t\t{\n\t\t\tconst mediaSection = this._mediaSections.get(mid);\n\n\t\t\tmediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n\t\t\tthis._replaceMediaSection(mediaSection);\n\t\t}\n\t}\n\n\tdisableMediaSection(mid)\n\t{\n\t\tconst mediaSection = this._mediaSections.get(mid);\n\n\t\tmediaSection.disable();\n\t}\n\n\tplanBStopReceiving({ mid, offerRtpParameters })\n\t{\n\t\tconst mediaSection = this._mediaSections.get(mid);\n\n\t\tmediaSection.planBStopReceiving({ offerRtpParameters });\n\t\tthis._replaceMediaSection(mediaSection);\n\t}\n\n\tsendSctpAssociation({ offerMediaObject })\n\t{\n\t\tconst mediaSection = new AnswerMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tsctpParameters     : this._sctpParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tofferMediaObject\n\t\t\t});\n\n\t\tthis._addMediaSection(mediaSection);\n\t}\n\n\treceiveSctpAssociation({ oldDataChannelSpec = false } = {})\n\t{\n\t\tconst mediaSection = new OfferMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tsctpParameters     : this._sctpParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tmid                : 'datachannel',\n\t\t\t\tkind               : 'application',\n\t\t\t\toldDataChannelSpec\n\t\t\t});\n\n\t\tthis._addMediaSection(mediaSection);\n\t}\n\n\tgetSdp()\n\t{\n\t\t// Increase SDP version.\n\t\tthis._sdpObject.origin.sessionVersion++;\n\n\t\treturn sdpTransform.write(this._sdpObject);\n\t}\n\n\t_addMediaSection(mediaSection)\n\t{\n\t\t// Store it in the map.\n\t\tthis._mediaSections.set(mediaSection.mid, mediaSection);\n\n\t\t// Update SDP object.\n\t\tthis._sdpObject.media.push(mediaSection.getObject());\n\n\t\tif (this._dtlsParameters)\n\t\t{\n\t\t\tthis._sdpObject.groups[0].mids =\n\t\t\t\t`${this._sdpObject.groups[0].mids} ${mediaSection.mid}`.trim();\n\t\t}\n\t}\n\n\t_replaceMediaSection(mediaSection)\n\t{\n\t\t// Store it in the map.\n\t\tthis._mediaSections.set(mediaSection.mid, mediaSection);\n\n\t\t// Update SDP object.\n\t\tthis._sdpObject.media = this._sdpObject.media\n\t\t\t.map((m) =>\n\t\t\t{\n\t\t\t\tif (String(m.mid) === mediaSection.mid)\n\t\t\t\t\treturn mediaSection.getObject();\n\t\t\t\telse\n\t\t\t\t\treturn m;\n\t\t\t});\n\t}\n}\n\nmodule.exports = RemoteSdp;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const sdpTransform = __webpack_require__(/*! sdp-transform */ \"./node_modules/sdp-transform/lib/index.js\");\n\n/**\n * Extract RTP capabilities.\n *\n * @param {Object} sdpObject - SDP Object generated by sdp-transform.\n *\n * @returns {RTCRtpCapabilities}\n */\nexports.extractRtpCapabilities = function({ sdpObject })\n{\n\t// Map of RtpCodecParameters indexed by payload type.\n\tconst codecsMap = new Map();\n\t// Array of RtpHeaderExtensions.\n\tconst headerExtensions = [];\n\t// Whether a m=audio/video section has been already found.\n\tlet gotAudio = false;\n\tlet gotVideo = false;\n\n\tfor (const m of sdpObject.media)\n\t{\n\t\tconst kind = m.type;\n\n\t\tswitch (kind)\n\t\t{\n\t\t\tcase 'audio':\n\t\t\t{\n\t\t\t\tif (gotAudio)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgotAudio = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'video':\n\t\t\t{\n\t\t\t\tif (gotVideo)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgotVideo = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Get codecs.\n\t\tfor (const rtp of m.rtp)\n\t\t{\n\t\t\tconst codec =\n\t\t\t{\n\t\t\t\tmimeType             : `${kind}/${rtp.codec}`,\n\t\t\t\tkind                 : kind,\n\t\t\t\tclockRate            : rtp.rate,\n\t\t\t\tpreferredPayloadType : rtp.payload,\n\t\t\t\tchannels             : rtp.encoding,\n\t\t\t\trtcpFeedback         : [],\n\t\t\t\tparameters           : {}\n\t\t\t};\n\n\t\t\tif (codec.kind !== 'audio')\n\t\t\t\tdelete codec.channels;\n\t\t\telse if (!codec.channels)\n\t\t\t\tcodec.channels = 1;\n\n\t\t\tcodecsMap.set(codec.preferredPayloadType, codec);\n\t\t}\n\n\t\t// Get codec parameters.\n\t\tfor (const fmtp of m.fmtp || [])\n\t\t{\n\t\t\tconst parameters = sdpTransform.parseFmtpConfig(fmtp.config);\n\t\t\tconst codec = codecsMap.get(fmtp.payload);\n\n\t\t\tif (!codec)\n\t\t\t\tcontinue;\n\n\t\t\t// Special case to convert parameter value to string.\n\t\t\tif (parameters && parameters['profile-level-id'])\n\t\t\t\tparameters['profile-level-id'] = String(parameters['profile-level-id']);\n\n\t\t\tcodec.parameters = parameters;\n\t\t}\n\n\t\t// Get RTCP feedback for each codec.\n\t\tfor (const fb of m.rtcpFb || [])\n\t\t{\n\t\t\tconst codec = codecsMap.get(fb.payload);\n\n\t\t\tif (!codec)\n\t\t\t\tcontinue;\n\n\t\t\tconst feedback =\n\t\t\t{\n\t\t\t\ttype      : fb.type,\n\t\t\t\tparameter : fb.subtype\n\t\t\t};\n\n\t\t\tif (!feedback.parameter)\n\t\t\t\tdelete feedback.parameter;\n\n\t\t\tcodec.rtcpFeedback.push(feedback);\n\t\t}\n\n\t\t// Get RTP header extensions.\n\t\tfor (const ext of m.ext || [])\n\t\t{\n\t\t\tconst headerExtension =\n\t\t\t{\n\t\t\t\tkind        : kind,\n\t\t\t\turi         : ext.uri,\n\t\t\t\tpreferredId : ext.value\n\t\t\t};\n\n\t\t\theaderExtensions.push(headerExtension);\n\t\t}\n\t}\n\n\tconst rtpCapabilities =\n\t{\n\t\tcodecs           : Array.from(codecsMap.values()),\n\t\theaderExtensions : headerExtensions,\n\t\tfecMechanisms    : []\n\t};\n\n\treturn rtpCapabilities;\n};\n\n/**\n * Extract DTLS parameters.\n *\n * @param {Object} sdpObject - SDP Object generated by sdp-transform.\n *\n * @returns {RTCDtlsParameters}\n */\nexports.extractDtlsParameters = function({ sdpObject })\n{\n\tconst mediaObject = (sdpObject.media || [])\n\t\t.find((m) => m.iceUfrag && m.port !== 0);\n\n\tif (!mediaObject)\n\t\tthrow new Error('no active media section found');\n\n\tconst fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;\n\tlet role;\n\n\tswitch (mediaObject.setup)\n\t{\n\t\tcase 'active':\n\t\t\trole = 'client';\n\t\t\tbreak;\n\t\tcase 'passive':\n\t\t\trole = 'server';\n\t\t\tbreak;\n\t\tcase 'actpass':\n\t\t\trole = 'auto';\n\t\t\tbreak;\n\t}\n\n\tconst dtlsParameters =\n\t{\n\t\trole,\n\t\tfingerprints :\n\t\t[\n\t\t\t{\n\t\t\t\talgorithm : fingerprint.type,\n\t\t\t\tvalue     : fingerprint.hash\n\t\t\t}\n\t\t]\n\t};\n\n\treturn dtlsParameters;\n};\n\n/**\n * Get RTCP CNAME.\n *\n * @param {Object} offerMediaObject - Local SDP media Object generated by sdp-transform.\n *\n * @returns {String}\n */\nexports.getCname = function({ offerMediaObject })\n{\n\tconst ssrcCnameLine = (offerMediaObject.ssrcs || [])\n\t\t.find((line) => line.attribute === 'cname');\n\n\tif (!ssrcCnameLine)\n\t\treturn '';\n\n\treturn ssrcCnameLine.value;\n};\n\n/**\n * Apply codec parameters in the given SDP m= section answer based on the\n * given RTP parameters of an offer.\n *\n * @param {RTCRtpParameters} offerRtpParameters\n * @param {Object} answerMediaObject\n */\nexports.applyCodecParameters = function(\n\t{\n\t\tofferRtpParameters,\n\t\tanswerMediaObject\n\t}\n)\n{\n\tfor (const codec of offerRtpParameters.codecs)\n\t{\n\t\tconst mimeType = codec.mimeType.toLowerCase();\n\n\t\t// Avoid parsing codec parameters for unhandled codecs.\n\t\tif (mimeType !== 'audio/opus')\n\t\t\tcontinue;\n\n\t\tconst rtp = (answerMediaObject.rtp || [])\n\t\t\t.find((r) => r.payload === codec.payloadType);\n\n\t\tif (!rtp)\n\t\t\tcontinue;\n\n\t\t// Just in case.\n\t\tanswerMediaObject.fmtp = answerMediaObject.fmtp || [];\n\n\t\tlet fmtp = answerMediaObject.fmtp\n\t\t\t.find((f) => f.payload === codec.payloadType);\n\n\t\tif (!fmtp)\n\t\t{\n\t\t\tfmtp = { payload: codec.payloadType, config: '' };\n\t\t\tanswerMediaObject.fmtp.push(fmtp);\n\t\t}\n\n\t\tconst parameters = sdpTransform.parseParams(fmtp.config);\n\n\t\tswitch (mimeType)\n\t\t{\n\t\t\tcase 'audio/opus':\n\t\t\t{\n\t\t\t\tconst spropStereo = codec.parameters['sprop-stereo'];\n\n\t\t\t\tif (spropStereo !== undefined)\n\t\t\t\t\tparameters.stereo = spropStereo ? 1 : 0;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Write the codec fmtp.config back.\n\t\tfmtp.config = '';\n\n\t\tfor (const key of Object.keys(parameters))\n\t\t{\n\t\t\tif (fmtp.config)\n\t\t\t\tfmtp.config += ';';\n\n\t\t\tfmtp.config += `${key}=${parameters[key]}`;\n\t\t}\n\t}\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Get RTP encodings.\n *\n * @param {Object} offerMediaObject - Local SDP media Object generated by sdp-transform.\n * @param {MediaStreamTrack} track\n *\n * @returns {Array<RTCRtpEncodingParameters>}\n */\nexports.getRtpEncodings = function({ offerMediaObject, track })\n{\n\t// First media SSRC (or the only one).\n\tlet firstSsrc;\n\tconst ssrcs = new Set();\n\n\tfor (const line of offerMediaObject.ssrcs || [])\n\t{\n\t\tif (line.attribute !== 'msid')\n\t\t\tcontinue;\n\n\t\tconst trackId = line.value.split(' ')[1];\n\n\t\tif (trackId === track.id)\n\t\t{\n\t\t\tconst ssrc = line.id;\n\n\t\t\tssrcs.add(ssrc);\n\n\t\t\tif (!firstSsrc)\n\t\t\t\tfirstSsrc = ssrc;\n\t\t}\n\t}\n\n\tif (ssrcs.size === 0)\n\t\tthrow new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n\n\tconst ssrcToRtxSsrc = new Map();\n\n\t// First assume RTX is used.\n\tfor (const line of offerMediaObject.ssrcGroups || [])\n\t{\n\t\tif (line.semantics !== 'FID')\n\t\t\tcontinue;\n\n\t\tlet [ ssrc, rtxSsrc ] = line.ssrcs.split(/\\s+/);\n\n\t\tssrc = Number(ssrc);\n\t\trtxSsrc = Number(rtxSsrc);\n\n\t\tif (ssrcs.has(ssrc))\n\t\t{\n\t\t\t// Remove both the SSRC and RTX SSRC from the set so later we know that they\n\t\t\t// are already handled.\n\t\t\tssrcs.delete(ssrc);\n\t\t\tssrcs.delete(rtxSsrc);\n\n\t\t\t// Add to the map.\n\t\t\tssrcToRtxSsrc.set(ssrc, rtxSsrc);\n\t\t}\n\t}\n\n\t// If the set of SSRCs is not empty it means that RTX is not being used, so take\n\t// media SSRCs from there.\n\tfor (const ssrc of ssrcs)\n\t{\n\t\t// Add to the map.\n\t\tssrcToRtxSsrc.set(ssrc, null);\n\t}\n\n\tconst encodings = [];\n\n\tfor (const [ ssrc, rtxSsrc ] of ssrcToRtxSsrc)\n\t{\n\t\tconst encoding = { ssrc };\n\n\t\tif (rtxSsrc)\n\t\t\tencoding.rtx = { ssrc: rtxSsrc };\n\n\t\tencodings.push(encoding);\n\t}\n\n\treturn encodings;\n};\n\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n *\n * @param {Object} offerMediaObject - Local SDP media Object generated by sdp-transform.\n * @param {MediaStreamTrack} track\n * @param {Number} numStreams - Number of simulcast streams.\n */\nexports.addLegacySimulcast = function({ offerMediaObject, track, numStreams })\n{\n\tif (numStreams <= 1)\n\t\tthrow new TypeError('numStreams must be greater than 1');\n\n\tlet firstSsrc;\n\tlet firstRtxSsrc;\n\tlet streamId;\n\n\t// Get the SSRC.\n\tconst ssrcMsidLine = (offerMediaObject.ssrcs || [])\n\t\t.find((line) =>\n\t\t{\n\t\t\tif (line.attribute !== 'msid')\n\t\t\t\treturn false;\n\n\t\t\tconst trackId = line.value.split(' ')[1];\n\n\t\t\tif (trackId === track.id)\n\t\t\t{\n\t\t\t\tfirstSsrc = line.id;\n\t\t\t\tstreamId = line.value.split(' ')[0];\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\tif (!ssrcMsidLine)\n\t\tthrow new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n\n\t// Get the SSRC for RTX.\n\t(offerMediaObject.ssrcGroups || [])\n\t\t.some((line) =>\n\t\t{\n\t\t\tif (line.semantics !== 'FID')\n\t\t\t\treturn;\n\n\t\t\tconst ssrcs = line.ssrcs.split(/\\s+/);\n\n\t\t\tif (Number(ssrcs[0]) === firstSsrc)\n\t\t\t{\n\t\t\t\tfirstRtxSsrc = Number(ssrcs[1]);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\tconst ssrcCnameLine = offerMediaObject.ssrcs\n\t\t.find((line) => (line.attribute === 'cname' && line.id === firstSsrc));\n\n\tif (!ssrcCnameLine)\n\t\tthrow new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n\n\tconst cname = ssrcCnameLine.value;\n\tconst ssrcs = [];\n\tconst rtxSsrcs = [];\n\n\tfor (let i = 0; i < numStreams; ++i)\n\t{\n\t\tssrcs.push(firstSsrc + i);\n\n\t\tif (firstRtxSsrc)\n\t\t\trtxSsrcs.push(firstRtxSsrc + i);\n\t}\n\n\tofferMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n\tofferMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n\n\tofferMediaObject.ssrcGroups.push(\n\t\t{\n\t\t\tsemantics : 'SIM',\n\t\t\tssrcs     : ssrcs.join(' ')\n\t\t});\n\n\tfor (let i = 0; i < ssrcs.length; ++i)\n\t{\n\t\tconst ssrc = ssrcs[i];\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : ssrc,\n\t\t\t\tattribute : 'cname',\n\t\t\t\tvalue     : cname\n\t\t\t});\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : ssrc,\n\t\t\t\tattribute : 'msid',\n\t\t\t\tvalue     : `${streamId} ${track.id}`\n\t\t\t});\n\t}\n\n\tfor (let i = 0; i < rtxSsrcs.length; ++i)\n\t{\n\t\tconst ssrc = ssrcs[i];\n\t\tconst rtxSsrc = rtxSsrcs[i];\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : rtxSsrc,\n\t\t\t\tattribute : 'cname',\n\t\t\t\tvalue     : cname\n\t\t\t});\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : rtxSsrc,\n\t\t\t\tattribute : 'msid',\n\t\t\t\tvalue     : `${streamId} ${track.id}`\n\t\t\t});\n\n\t\tofferMediaObject.ssrcGroups.push(\n\t\t\t{\n\t\t\t\tsemantics : 'FID',\n\t\t\t\tssrcs     : `${ssrc} ${rtxSsrc}`\n\t\t\t});\n\t}\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Get RTP encodings.\n *\n * @param {Object} offerMediaObject - Local SDP media Object generated by sdp-transform.\n *\n * @returns {Array<RTCRtpEncodingParameters>}\n */\nexports.getRtpEncodings = function({ offerMediaObject })\n{\n\tconst ssrcs = new Set();\n\n\tfor (const line of offerMediaObject.ssrcs || [])\n\t{\n\t\tconst ssrc = line.id;\n\n\t\tssrcs.add(ssrc);\n\t}\n\n\tif (ssrcs.size === 0)\n\t\tthrow new Error('no a=ssrc lines found');\n\n\tconst ssrcToRtxSsrc = new Map();\n\n\t// First assume RTX is used.\n\tfor (const line of offerMediaObject.ssrcGroups || [])\n\t{\n\t\tif (line.semantics !== 'FID')\n\t\t\tcontinue;\n\n\t\tlet [ ssrc, rtxSsrc ] = line.ssrcs.split(/\\s+/);\n\n\t\tssrc = Number(ssrc);\n\t\trtxSsrc = Number(rtxSsrc);\n\n\t\tif (ssrcs.has(ssrc))\n\t\t{\n\t\t\t// Remove both the SSRC and RTX SSRC from the set so later we know that they\n\t\t\t// are already handled.\n\t\t\tssrcs.delete(ssrc);\n\t\t\tssrcs.delete(rtxSsrc);\n\n\t\t\t// Add to the map.\n\t\t\tssrcToRtxSsrc.set(ssrc, rtxSsrc);\n\t\t}\n\t}\n\n\t// If the set of SSRCs is not empty it means that RTX is not being used, so take\n\t// media SSRCs from there.\n\tfor (const ssrc of ssrcs)\n\t{\n\t\t// Add to the map.\n\t\tssrcToRtxSsrc.set(ssrc, null);\n\t}\n\n\tconst encodings = [];\n\n\tfor (const [ ssrc, rtxSsrc ] of ssrcToRtxSsrc)\n\t{\n\t\tconst encoding = { ssrc };\n\n\t\tif (rtxSsrc)\n\t\t\tencoding.rtx = { ssrc: rtxSsrc };\n\n\t\tencodings.push(encoding);\n\t}\n\n\treturn encodings;\n};\n\n/**\n * Adds multi-ssrc based simulcast into the given SDP media section offer.\n *\n * @param {Object} offerMediaObject - Local SDP media Object generated by sdp-transform.\n * @param {Number} numStreams - Number of simulcast streams.\n */\nexports.addLegacySimulcast = function({ offerMediaObject, numStreams })\n{\n\tif (numStreams <= 1)\n\t\tthrow new TypeError('numStreams must be greater than 1');\n\n\t// Get the SSRC.\n\tconst ssrcMsidLine = (offerMediaObject.ssrcs || [])\n\t\t.find((line) => line.attribute === 'msid');\n\n\tif (!ssrcMsidLine)\n\t\tthrow new Error('a=ssrc line with msid information not found');\n\n\tconst [ streamId, trackId ] = ssrcMsidLine.value.split(' ')[0];\n\tconst firstSsrc = ssrcMsidLine.id;\n\tlet firstRtxSsrc;\n\n\t// Get the SSRC for RTX.\n\t(offerMediaObject.ssrcGroups || [])\n\t\t.some((line) =>\n\t\t{\n\t\t\tif (line.semantics !== 'FID')\n\t\t\t\treturn;\n\n\t\t\tconst ssrcs = line.ssrcs.split(/\\s+/);\n\n\t\t\tif (Number(ssrcs[0]) === firstSsrc)\n\t\t\t{\n\t\t\t\tfirstRtxSsrc = Number(ssrcs[1]);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\tconst ssrcCnameLine = offerMediaObject.ssrcs\n\t\t.find((line) => line.attribute === 'cname');\n\n\tif (!ssrcCnameLine)\n\t\tthrow new Error('a=ssrc line with cname information not found');\n\n\tconst cname = ssrcCnameLine.value;\n\tconst ssrcs = [];\n\tconst rtxSsrcs = [];\n\n\tfor (let i = 0; i < numStreams; ++i)\n\t{\n\t\tssrcs.push(firstSsrc + i);\n\n\t\tif (firstRtxSsrc)\n\t\t\trtxSsrcs.push(firstRtxSsrc + i);\n\t}\n\n\tofferMediaObject.ssrcGroups = [];\n\tofferMediaObject.ssrcs = [];\n\n\tofferMediaObject.ssrcGroups.push(\n\t\t{\n\t\t\tsemantics : 'SIM',\n\t\t\tssrcs     : ssrcs.join(' ')\n\t\t});\n\n\tfor (let i = 0; i < ssrcs.length; ++i)\n\t{\n\t\tconst ssrc = ssrcs[i];\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : ssrc,\n\t\t\t\tattribute : 'cname',\n\t\t\t\tvalue     : cname\n\t\t\t});\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : ssrc,\n\t\t\t\tattribute : 'msid',\n\t\t\t\tvalue     : `${streamId} ${trackId}`\n\t\t\t});\n\t}\n\n\tfor (let i = 0; i < rtxSsrcs.length; ++i)\n\t{\n\t\tconst ssrc = ssrcs[i];\n\t\tconst rtxSsrc = rtxSsrcs[i];\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : rtxSsrc,\n\t\t\t\tattribute : 'cname',\n\t\t\t\tvalue     : cname\n\t\t\t});\n\n\t\tofferMediaObject.ssrcs.push(\n\t\t\t{\n\t\t\t\tid        : rtxSsrc,\n\t\t\t\tattribute : 'msid',\n\t\t\t\tvalue     : `${streamId} ${trackId}`\n\t\t\t});\n\n\t\tofferMediaObject.ssrcGroups.push(\n\t\t\t{\n\t\t\t\tsemantics : 'FID',\n\t\t\t\tssrcs     : `${ssrc} ${rtxSsrc}`\n\t\t\t});\n\t}\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { version } = __webpack_require__(/*! ../package.json */ \"./node_modules/mediasoup-client/package.json\");\nconst Device = __webpack_require__(/*! ./Device */ \"./node_modules/mediasoup-client/lib/Device.js\");\nconst parseScalabilityMode = __webpack_require__(/*! ./scalabilityModes */ \"./node_modules/mediasoup-client/lib/scalabilityModes.js\").parse;\n\n/**\n * Expose mediasoup-client version.\n *\n * @type {String}\n */\nexports.version = version;\n\n/**\n * Expose Device class.\n *\n * @type {Class}\n */\nexports.Device = Device;\n\n/**\n * Expose parseScalabilityMode function.\n *\n * @type {Function}\n */\nexports.parseScalabilityMode = parseScalabilityMode;\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/index.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/ortc.js":
/*!***************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/ortc.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const h264 = __webpack_require__(/*! h264-profile-level-id */ \"./node_modules/h264-profile-level-id/index.js\");\n\n/**\n * Generate extended RTP capabilities for sending and receiving.\n *\n * @param {RTCRtpCapabilities} localCaps - Local capabilities.\n * @param {RTCRtpCapabilities} remoteCaps - Remote capabilities.\n *\n * @returns {RTCExtendedRtpCapabilities}\n */\nexports.getExtendedRtpCapabilities = function(localCaps, remoteCaps)\n{\n\tconst extendedRtpCapabilities =\n\t{\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tfecMechanisms    : []\n\t};\n\n\t// Match media codecs and keep the order preferred by remoteCaps.\n\tfor (const remoteCodec of remoteCaps.codecs || [])\n\t{\n\t\tif (\n\t\t\ttypeof remoteCodec !== 'object' ||\n\t\t\tArray.isArray(remoteCodec) ||\n\t\t\ttypeof remoteCodec.mimeType !== 'string' ||\n\t\t\t!/^(audio|video)\\/(.+)/.test(remoteCodec.mimeType)\n\t\t)\n\t\t{\n\t\t\tthrow new TypeError('invalid remote capabilitiy codec');\n\t\t}\n\n\t\tif (/.+\\/rtx$/i.test(remoteCodec.mimeType))\n\t\t\tcontinue;\n\n\t\tconst matchingLocalCodec = (localCaps.codecs || [])\n\t\t\t.find((localCodec) => (\n\t\t\t\tmatchCodecs(localCodec, remoteCodec, { strict: true, modify: true }))\n\t\t\t);\n\n\t\tif (matchingLocalCodec)\n\t\t{\n\t\t\tconst extendedCodec =\n\t\t\t{\n\t\t\t\tmimeType             : matchingLocalCodec.mimeType,\n\t\t\t\tkind                 : matchingLocalCodec.kind,\n\t\t\t\tclockRate            : matchingLocalCodec.clockRate,\n\t\t\t\tlocalPayloadType     : matchingLocalCodec.preferredPayloadType,\n\t\t\t\tlocalRtxPayloadType  : null,\n\t\t\t\tremotePayloadType    : remoteCodec.preferredPayloadType,\n\t\t\t\tremoteRtxPayloadType : null,\n\t\t\t\tchannels             : matchingLocalCodec.channels,\n\t\t\t\trtcpFeedback         : reduceRtcpFeedback(matchingLocalCodec, remoteCodec),\n\t\t\t\tlocalParameters      : matchingLocalCodec.parameters || {},\n\t\t\t\tremoteParameters     : remoteCodec.parameters || {}\n\t\t\t};\n\n\t\t\tif (!extendedCodec.channels)\n\t\t\t\tdelete extendedCodec.channels;\n\n\t\t\textendedRtpCapabilities.codecs.push(extendedCodec);\n\t\t}\n\t}\n\n\t// Match RTX codecs.\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs || [])\n\t{\n\t\tconst matchingLocalRtxCodec = (localCaps.codecs || [])\n\t\t\t.find((localCodec) => (\n\t\t\t\t/.+\\/rtx$/i.test(localCodec.mimeType) &&\n\t\t\t\tlocalCodec.parameters.apt === extendedCodec.localPayloadType\n\t\t\t));\n\n\t\tconst matchingRemoteRtxCodec = (remoteCaps.codecs || [])\n\t\t\t.find((remoteCodec) => (\n\t\t\t\t/.+\\/rtx$/i.test(remoteCodec.mimeType) &&\n\t\t\t\tremoteCodec.parameters.apt === extendedCodec.remotePayloadType\n\t\t\t));\n\n\t\tif (matchingLocalRtxCodec && matchingRemoteRtxCodec)\n\t\t{\n\t\t\textendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;\n\t\t\textendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;\n\t\t}\n\t}\n\n\t// Match header extensions.\n\tfor (const remoteExt of remoteCaps.headerExtensions || [])\n\t{\n\t\tconst matchingLocalExt = (localCaps.headerExtensions || [])\n\t\t\t.find((localExt) => matchHeaderExtensions(localExt, remoteExt));\n\n\t\tif (matchingLocalExt)\n\t\t{\n\t\t\tconst extendedExt =\n\t\t\t{\n\t\t\t\tkind      : remoteExt.kind,\n\t\t\t\turi       : remoteExt.uri,\n\t\t\t\tsendId    : matchingLocalExt.preferredId,\n\t\t\t\trecvId    : remoteExt.preferredId,\n\t\t\t\tdirection : 'sendrecv'\n\t\t\t};\n\n\t\t\tswitch (remoteExt.direction)\n\t\t\t{\n\t\t\t\tcase 'recvonly':\n\t\t\t\t\textendedExt.direction = 'sendonly';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'sendonly':\n\t\t\t\t\textendedExt.direction = 'recvonly';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'inactive':\n\t\t\t\t\textendedExt.direction = 'inactive';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\textendedExt.direction = 'sendrecv';\n\t\t\t}\n\n\t\t\textendedRtpCapabilities.headerExtensions.push(extendedExt);\n\t\t}\n\t}\n\n\treturn extendedRtpCapabilities;\n};\n\n/**\n * Generate RTP capabilities for receiving media based on the given extended\n * RTP capabilities.\n *\n * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities\n *\n * @returns {RTCRtpCapabilities}\n */\nexports.getRecvRtpCapabilities = function(extendedRtpCapabilities)\n{\n\tconst rtpCapabilities =\n\t{\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tfecMechanisms    : []\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tconst codec =\n\t\t{\n\t\t\tmimeType             : extendedCodec.mimeType,\n\t\t\tkind                 : extendedCodec.kind,\n\t\t\tclockRate            : extendedCodec.clockRate,\n\t\t\tpreferredPayloadType : extendedCodec.remotePayloadType,\n\t\t\tchannels             : extendedCodec.channels,\n\t\t\trtcpFeedback         : extendedCodec.rtcpFeedback,\n\t\t\tparameters           : extendedCodec.localParameters\n\t\t};\n\n\t\tif (!codec.channels)\n\t\t\tdelete codec.channels;\n\n\t\trtpCapabilities.codecs.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (extendedCodec.remoteRtxPayloadType)\n\t\t{\n\t\t\tconst extendedRtxCodec =\n\t\t\t{\n\t\t\t\tmimeType             : `${extendedCodec.kind}/rtx`,\n\t\t\t\tkind                 : extendedCodec.kind,\n\t\t\t\tclockRate            : extendedCodec.clockRate,\n\t\t\t\tpreferredPayloadType : extendedCodec.remoteRtxPayloadType,\n\t\t\t\trtcpFeedback         : [],\n\t\t\t\tparameters           :\n\t\t\t\t{\n\t\t\t\t\tapt : extendedCodec.remotePayloadType\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trtpCapabilities.codecs.push(extendedRtxCodec);\n\t\t}\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions not valid for receiving.\n\t\tif (\n\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\textendedExtension.direction !== 'recvonly'\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext =\n\t\t{\n\t\t\tkind        : extendedExtension.kind,\n\t\t\turi         : extendedExtension.uri,\n\t\t\tpreferredId : extendedExtension.recvId\n\t\t};\n\n\t\trtpCapabilities.headerExtensions.push(ext);\n\t}\n\n\trtpCapabilities.fecMechanisms = extendedRtpCapabilities.fecMechanisms;\n\n\treturn rtpCapabilities;\n};\n\n/**\n * Generate RTP parameters of the given kind for sending media.\n * Just the first media codec per kind is considered.\n * NOTE: mid, encodings and rtcp fields are left empty.\n *\n * @param {kind} kind\n * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities\n *\n * @returns {RTCRtpParameters}\n */\nexports.getSendingRtpParameters = function(kind, extendedRtpCapabilities)\n{\n\tconst rtpParameters =\n\t{\n\t\tmid              : null,\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tencodings        : [],\n\t\trtcp             : {}\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tif (extendedCodec.kind !== kind)\n\t\t\tcontinue;\n\n\t\tconst codec =\n\t\t{\n\t\t\tmimeType     : extendedCodec.mimeType,\n\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\tpayloadType  : extendedCodec.localPayloadType,\n\t\t\tchannels     : extendedCodec.channels,\n\t\t\trtcpFeedback : extendedCodec.rtcpFeedback,\n\t\t\tparameters   : extendedCodec.localParameters\n\t\t};\n\n\t\tif (!codec.channels)\n\t\t\tdelete codec.channels;\n\n\t\trtpParameters.codecs.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (extendedCodec.localRtxPayloadType)\n\t\t{\n\t\t\tconst rtxCodec =\n\t\t\t{\n\t\t\t\tmimeType     : `${extendedCodec.kind}/rtx`,\n\t\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\t\tpayloadType  : extendedCodec.localRtxPayloadType,\n\t\t\t\trtcpFeedback : [],\n\t\t\t\tparameters   :\n\t\t\t\t{\n\t\t\t\t\tapt : extendedCodec.localPayloadType\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trtpParameters.codecs.push(rtxCodec);\n\t\t}\n\n\t\t// NOTE: We assume a single media codec plus an optional RTX codec.\n\t\tbreak;\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions of a different kind and those not valid for sending.\n\t\tif (\n\t\t\t(extendedExtension.kind && extendedExtension.kind !== kind) ||\n\t\t\t(\n\t\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\t\textendedExtension.direction !== 'sendonly'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext =\n\t\t{\n\t\t\turi : extendedExtension.uri,\n\t\t\tid  : extendedExtension.sendId\n\t\t};\n\n\t\trtpParameters.headerExtensions.push(ext);\n\t}\n\n\treturn rtpParameters;\n};\n\n/**\n * Generate RTP parameters of the given kind suitable for the remote SDP answer.\n *\n * @param {kind} kind\n * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities\n *\n * @returns {RTCRtpParameters}\n */\nexports.getSendingRemoteRtpParameters = function(kind, extendedRtpCapabilities)\n{\n\tconst rtpParameters =\n\t{\n\t\tmid              : null,\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tencodings        : [],\n\t\trtcp             : {}\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tif (extendedCodec.kind !== kind)\n\t\t\tcontinue;\n\n\t\tconst codec =\n\t\t{\n\t\t\tmimeType     : extendedCodec.mimeType,\n\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\tpayloadType  : extendedCodec.localPayloadType,\n\t\t\tchannels     : extendedCodec.channels,\n\t\t\trtcpFeedback : extendedCodec.rtcpFeedback,\n\t\t\tparameters   : extendedCodec.remoteParameters\n\t\t};\n\n\t\tif (!codec.channels)\n\t\t\tdelete codec.channels;\n\n\t\trtpParameters.codecs.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (extendedCodec.localRtxPayloadType)\n\t\t{\n\t\t\tconst rtxCodec =\n\t\t\t{\n\t\t\t\tmimeType     : `${extendedCodec.kind}/rtx`,\n\t\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\t\tpayloadType  : extendedCodec.localRtxPayloadType,\n\t\t\t\trtcpFeedback : [],\n\t\t\t\tparameters   :\n\t\t\t\t{\n\t\t\t\t\tapt : extendedCodec.localPayloadType\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trtpParameters.codecs.push(rtxCodec);\n\t\t}\n\n\t\t// NOTE: We assume a single media codec plus an optional RTX codec.\n\t\tbreak;\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions of a different kind and those not valid for sending.\n\t\tif (\n\t\t\t(extendedExtension.kind && extendedExtension.kind !== kind) ||\n\t\t\t(\n\t\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\t\textendedExtension.direction !== 'sendonly'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext =\n\t\t{\n\t\t\turi : extendedExtension.uri,\n\t\t\tid  : extendedExtension.sendId\n\t\t};\n\n\t\trtpParameters.headerExtensions.push(ext);\n\t}\n\n\t// Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.\n\tif (\n\t\trtpParameters.headerExtensions.some((ext) => (\n\t\t\text.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'\n\t\t))\n\t)\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb) => fb.type !== 'goog-remb');\n\t\t}\n\t}\n\telse if (\n\t\trtpParameters.headerExtensions.some((ext) => (\n\t\t\text.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'\n\t\t))\n\t)\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb) => fb.type !== 'transport-cc');\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb) => (\n\t\t\t\t\tfb.type !== 'transport-cc' &&\n\t\t\t\t\tfb.type !== 'goog-remb'\n\t\t\t\t));\n\t\t}\n\t}\n\n\treturn rtpParameters;\n};\n\n/**\n * Whether media can be sent based on the given RTP capabilities.\n *\n * @param {String} kind\n * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities\n *\n * @returns {Boolean}\n */\nexports.canSend = function(kind, extendedRtpCapabilities)\n{\n\treturn extendedRtpCapabilities.codecs.\n\t\tsome((codec) => codec.kind === kind);\n};\n\n/**\n * Whether the given RTP parameters can be received with the given RTP\n * capabilities.\n *\n * @param {RTCRtpParameters} rtpParameters\n * @param {RTCExtendedRtpCapabilities} extendedRtpCapabilities\n *\n * @returns {Boolean}\n */\nexports.canReceive = function(rtpParameters, extendedRtpCapabilities)\n{\n\tif (rtpParameters.codecs.length === 0)\n\t\treturn false;\n\n\tconst firstMediaCodec = rtpParameters.codecs[0];\n\n\treturn extendedRtpCapabilities.codecs\n\t\t.some((codec) => codec.remotePayloadType === firstMediaCodec.payloadType);\n};\n\nfunction matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {})\n{\n\tconst aMimeType = aCodec.mimeType.toLowerCase();\n\tconst bMimeType = bCodec.mimeType.toLowerCase();\n\n\tif (aMimeType !== bMimeType)\n\t\treturn false;\n\n\tif (aCodec.clockRate !== bCodec.clockRate)\n\t\treturn false;\n\n\tif (\n\t\t/^audio\\/.+$/i.test(aMimeType) &&\n\t\t(\n\t\t\t(aCodec.channels !== undefined && aCodec.channels !== 1) ||\n\t\t\t(bCodec.channels !== undefined && bCodec.channels !== 1)\n\t\t) &&\n\t\taCodec.channels !== bCodec.channels\n\t)\n\t{\n\t\treturn false;\n\t}\n\n\t// Per codec special checks.\n\tswitch (aMimeType)\n\t{\n\t\tcase 'video/h264':\n\t\t{\n\t\t\tconst aPacketizationMode = (aCodec.parameters || {})['packetization-mode'] || 0;\n\t\t\tconst bPacketizationMode = (bCodec.parameters || {})['packetization-mode'] || 0;\n\n\t\t\tif (aPacketizationMode !== bPacketizationMode)\n\t\t\t\treturn false;\n\n\t\t\t// If strict matching check profile-level-id.\n\t\t\tif (strict)\n\t\t\t{\n\t\t\t\tif (!h264.isSameProfile(aCodec.parameters, bCodec.parameters))\n\t\t\t\t\treturn false;\n\n\t\t\t\tlet selectedProfileLevelId;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tselectedProfileLevelId =\n\t\t\t\t\t\th264.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);\n\t\t\t\t}\n\t\t\t\tcatch (error)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (modify)\n\t\t\t\t{\n\t\t\t\t\taCodec.parameters = aCodec.parameters || {};\n\n\t\t\t\t\tif (selectedProfileLevelId)\n\t\t\t\t\t\taCodec.parameters['profile-level-id'] = selectedProfileLevelId;\n\t\t\t\t\telse\n\t\t\t\t\t\tdelete aCodec.parameters['profile-level-id'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'video/vp9':\n\t\t{\n\t\t\t// If strict matching check profile-id.\n\t\t\tif (strict)\n\t\t\t{\n\t\t\t\tconst aProfileId = (aCodec.parameters || {})['profile-id'] || 0;\n\t\t\t\tconst bProfileId = (bCodec.parameters || {})['profile-id'] || 0;\n\n\t\t\t\tif (aProfileId !== bProfileId)\n\t\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction matchHeaderExtensions(aExt, bExt)\n{\n\tif (aExt.kind && bExt.kind && aExt.kind !== bExt.kind)\n\t\treturn false;\n\n\tif (aExt.uri !== bExt.uri)\n\t\treturn false;\n\n\treturn true;\n}\n\nfunction reduceRtcpFeedback(codecA, codecB)\n{\n\tconst reducedRtcpFeedback = [];\n\n\tfor (const aFb of codecA.rtcpFeedback || [])\n\t{\n\t\tconst matchingBFb = (codecB.rtcpFeedback || [])\n\t\t\t.find((bFb) => (\n\t\t\t\tbFb.type === aFb.type &&\n\t\t\t\t(bFb.parameter === aFb.parameter || (!bFb.parameter && !aFb.parameter))\n\t\t\t));\n\n\t\tif (matchingBFb)\n\t\t\treducedRtcpFeedback.push(matchingBFb);\n\t}\n\n\treturn reducedRtcpFeedback;\n}\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/ortc.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/scalabilityModes.js":
/*!***************************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/scalabilityModes.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const ScalabilityModeRegex = new RegExp('^[LS]([1-9]\\\\d{0,1})T([1-9]\\\\d{0,1})');\n\nexports.parse = function(scalabilityMode)\n{\n\tconst match = ScalabilityModeRegex.exec(scalabilityMode);\n\n\tif (!match)\n\t\treturn { spatialLayers: 1, temporalLayers: 1 };\n\n\treturn {\n\t\tspatialLayers  : Number(match[1]),\n\t\ttemporalLayers : Number(match[2])\n\t};\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/scalabilityModes.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/lib/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/mediasoup-client/lib/utils.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Clones the given object/array.\n *\n * @param {Object|Array} obj\n *\n * @returns {Object|Array}\n */\nexports.clone = function(obj)\n{\n\tif (typeof obj !== 'object')\n\t\treturn {};\n\n\treturn JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Generates a random positive integer.\n *\n * @returns {Number}\n */\nexports.generateRandomNumber = function()\n{\n\treturn Math.round(Math.random() * 10000000);\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/lib/utils.js?");

/***/ }),

/***/ "./node_modules/mediasoup-client/package.json":
/*!****************************************************!*\
  !*** ./node_modules/mediasoup-client/package.json ***!
  \****************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, contributors, dependencies, deprecated, description, devDependencies, engines, homepage, jest, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"mediasoup-client@3.2.0\\\",\\\"_id\\\":\\\"mediasoup-client@3.2.0\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-1/V1RuPad+O6KCpecnTKvLy+H2JEAPDpvCmj/LDH/1aExR73m9hufO3YZCe9Q+B4qH46pQUjgCLdQnsBok7Skg==\\\",\\\"_location\\\":\\\"/mediasoup-client\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"version\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"mediasoup-client@3.2.0\\\",\\\"name\\\":\\\"mediasoup-client\\\",\\\"escapedName\\\":\\\"mediasoup-client\\\",\\\"rawSpec\\\":\\\"3.2.0\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"3.2.0\\\"},\\\"_requiredBy\\\":[\\\"#USER\\\",\\\"/\\\"],\\\"_resolved\\\":\\\"http://153.120.162.36:4900/mediasoup-client/-/mediasoup-client-3.2.0.tgz\\\",\\\"_shasum\\\":\\\"3b99cf0d4894b9abe1ea1c49dad32070eaa90e1c\\\",\\\"_spec\\\":\\\"mediasoup-client@3.2.0\\\",\\\"_where\\\":\\\"/Users/denvirethan/Documents/node/mediasoup/v4/record/app\\\",\\\"author\\\":{\\\"name\\\":\\\"Iñaki Baz Castillo\\\",\\\"email\\\":\\\"ibc@aliax.net\\\",\\\"url\\\":\\\"https://inakibaz.me\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/versatica/mediasoup-client/issues\\\"},\\\"bundleDependencies\\\":false,\\\"contributors\\\":[{\\\"name\\\":\\\"José Luis Millán\\\",\\\"email\\\":\\\"jmillan@aliax.net\\\",\\\"url\\\":\\\"https://github.com/jmillan\\\"}],\\\"dependencies\\\":{\\\"awaitqueue\\\":\\\"^1.0.0\\\",\\\"bowser\\\":\\\"^2.4.0\\\",\\\"debug\\\":\\\"^4.1.1\\\",\\\"events\\\":\\\"^3.0.0\\\",\\\"h264-profile-level-id\\\":\\\"^1.0.0\\\",\\\"open-cli\\\":\\\"^5.0.0\\\",\\\"sdp-transform\\\":\\\"^2.10.0\\\"},\\\"deprecated\\\":false,\\\"description\\\":\\\"mediasoup client side JavaScript library\\\",\\\"devDependencies\\\":{\\\"eslint\\\":\\\"^6.0.1\\\",\\\"eslint-plugin-jest\\\":\\\"^22.7.2\\\",\\\"jest\\\":\\\"^24.8.0\\\",\\\"jest-tobetype\\\":\\\"^1.2.3\\\",\\\"node-mediastreamtrack\\\":\\\"0.1.0\\\",\\\"uuid\\\":\\\"^3.3.2\\\"},\\\"engines\\\":{\\\"node\\\":\\\">=8.6.0\\\"},\\\"homepage\\\":\\\"https://mediasoup.org\\\",\\\"jest\\\":{\\\"verbose\\\":true,\\\"testEnvironment\\\":\\\"node\\\",\\\"testRegex\\\":\\\"test/test.*\\\\\\\\.js\\\"},\\\"license\\\":\\\"ISC\\\",\\\"main\\\":\\\"lib/index.js\\\",\\\"name\\\":\\\"mediasoup-client\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/versatica/mediasoup-client.git\\\"},\\\"scripts\\\":{\\\"coverage\\\":\\\"jest --coverage && open-cli coverage/lcov-report/index.html\\\",\\\"lint\\\":\\\"eslint -c .eslintrc.js lib test\\\",\\\"test\\\":\\\"jest\\\"},\\\"version\\\":\\\"3.2.0\\\"}\");\n\n//# sourceURL=webpack://Lib/./node_modules/mediasoup-client/package.json?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://Lib/./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://Lib/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/sdp-transform/lib/grammar.js":
/*!***************************************************!*\
  !*** ./node_modules/sdp-transform/lib/grammar.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{\n    // o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly...\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  // k: [{}], // outdated thing ignored\n  t: [{\n    // t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{\n    // c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{\n    // b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{\n    // m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    {\n      // a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding)\n          ? 'rtpmap:%d %s/%s/%s'\n          : o.rate\n            ? 'rtpmap:%d %s/%s'\n            : 'rtpmap:%d %s';\n      }\n    },\n    {\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      // a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    {\n      // a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    {\n      // a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null)\n          ? 'rtcp:%d %s IP%d %s'\n          : 'rtcp:%d';\n      }\n    },\n    {\n      // a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    {\n      // a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null)\n          ? 'rtcp-fb:%s %s %s'\n          : 'rtcp-fb:%s %s';\n      }\n    },\n    {\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      // a=extmap:1/recvonly URI-gps-string\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\n      format: function (o) {\n        return (\n          'extmap:%d' +\n          (o.direction ? '/%s' : '%v') +\n          (o['encrypt-uri'] ? ' %s' : '%v') +\n          ' %s' +\n          (o.config ? ' %s' : '')\n        );\n      }\n    },\n    {\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null)\n          ? 'crypto:%d %s %s %s'\n          : 'crypto:%d %s %s';\n      }\n    },\n    {\n      // a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    {\n      // a=connection:new\n      name: 'connectionType',\n      reg: /^connection:(new|existing)/,\n      format: 'connection:%s'\n    },\n    {\n      // a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    {\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    {\n      // a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    {\n      // a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    {\n      // a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    {\n      // a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    {\n      // a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    {\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    {\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    {\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    {\n      // a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    {\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    {\n      // a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    {\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    {\n      // a=ssrc-group:FEC 1 2\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    {\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    {\n      // a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    {\n      // a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    {\n      // a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    {\n      // a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null)\n          ? 'sctpmap:%s %s %s'\n          : 'sctpmap:%s %s';\n      }\n    },\n    {\n      // a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    {\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    {\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      // a=imageattr:* send [x=800,y=640] recv *\n      // a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        // a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        // recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      // a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        // a=simulcast:\n        '^simulcast:' +\n        // send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        // space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        // end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    {\n      // old simulcast draft 03 (implemented by Firefox)\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      // a=simulcast: recv pt=97;98 send pt=97\n      // a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      // a=framerate:25\n      // a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    {\n      // RFC4570\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\n      name: 'sourceFilter',\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\n      format: 'source-filter: %s %s %s %s %s'\n    },\n    {\n      // a=bundle-only\n      name: 'bundleOnly',\n      reg: /^(bundle-only)/\n    },\n    {\n      // a=label:1\n      name: 'label',\n      reg: /^label:(.+)/,\n      format: 'label:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\n      name: 'sctpPort',\n      reg: /^sctp-port:(\\d+)$/,\n      format: 'sctp-port:%s'\n    },\n    {\n      // RFC version 26 for SCTP over DTLS\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\n      name: 'maxMessageSize',\n      reg: /^max-message-size:(\\d+)$/,\n      format: 'max-message-size:%s'\n    },\n    {\n      // a=keywds:keywords\n      name: 'keywords',\n      reg: /^keywds:(.+)$/,\n      format: 'keywds:%s'\n    },\n    {\n      // any a= that we don't understand is kept verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n\n\n//# sourceURL=webpack://Lib/./node_modules/sdp-transform/lib/grammar.js?");

/***/ }),

/***/ "./node_modules/sdp-transform/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/sdp-transform/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var parser = __webpack_require__(/*! ./parser */ \"./node_modules/sdp-transform/lib/parser.js\");\nvar writer = __webpack_require__(/*! ./writer */ \"./node_modules/sdp-transform/lib/writer.js\");\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n\n\n//# sourceURL=webpack://Lib/./node_modules/sdp-transform/lib/index.js?");

/***/ }),

/***/ "./node_modules/sdp-transform/lib/parser.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/parser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = __webpack_require__(/*! ./grammar */ \"./node_modules/sdp-transform/lib/grammar.js\");\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  } else if (s.length === 1 && expr.length > 1) {\n    acc[s[0]] = undefined;\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.toString().split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/sdp-transform/lib/parser.js?");

/***/ }),

/***/ "./node_modules/sdp-transform/lib/writer.js":
/*!**************************************************!*\
  !*** ./node_modules/sdp-transform/lib/writer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var grammar = __webpack_require__(/*! ./grammar */ \"./node_modules/sdp-transform/lib/grammar.js\");\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n\n\n//# sourceURL=webpack://Lib/./node_modules/sdp-transform/lib/writer.js?");

/***/ }),

/***/ "./src/gum.js":
/*!********************!*\
  !*** ./src/gum.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const DEFAULT_CONSTRAINTS = Object.freeze({\n  audio: true, \n  video: { width: 640, height: 480 }\n});\n\nmodule.exports.GUM = () => {\n  const mediaStream = navigator.mediaDevices.getUserMedia(DEFAULT_CONSTRAINTS);\n  return mediaStream;\n};\n\n\n//# sourceURL=webpack://Lib/./src/gum.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const mediasoup = __webpack_require__(/*! mediasoup-client */ \"./node_modules/mediasoup-client/lib/index.js\");\n\nconst { GUM } = __webpack_require__(/*! ./gum */ \"./src/gum.js\");\nconst Peer = __webpack_require__(/*! ./peer */ \"./src/peer.js\");\nconst SocketQueue = __webpack_require__(/*! ./queue */ \"./src/queue.js\");\n\nlet peer;\nconst queue = new SocketQueue();\n\nconst socket = new WebSocket(`wss://${window.location.hostname}:3000`);\nconst localVideoNode = document.getElementById('localVideo');\n\nconst handleSocketOpen = async () => {\n  console.log('handleSocketOpen()');\n};\n\nconst handleSocketMessage = async (message) => {\n  try {\n    const jsonMessage = JSON.parse(message.data);\n    handleJsonMessage(jsonMessage);\n  } catch (error) {\n    console.error('handleSocketMessage() failed [error:%o]', error);\n  }\n};\n\nconst handleSocketClose = () => {\n  console.log('handleSocketClose()');\n  document.getElementById('startRecordButton').disabled = true;\n  document.getElementById('stopRecordButton').disabled = true;\n};\n\nconst handleSocketError = error => {\n  console.error('handleSocketError() [error:%o]', error);\n};\n\nconst handleJsonMessage = async (jsonMessage) => {\n  const { action } = jsonMessage;\n\n  switch (action) {\n    case 'router-rtp-capabilities':\n      handleRouterRtpCapabilitiesRequest(jsonMessage);\n      break;\n    case 'create-transport':\n      handleCreateTransportRequest(jsonMessage);\n      break;\n    case 'connect-transport':\n      handleConnectTransportRequest(jsonMessage);\n      break;\n    case 'produce':\n      handleProduceRequest(jsonMessage);\n      break;\n    default: console.log('handleJsonMessage() unknown action %s', action);\n  }\n};\n\nconst handleRouterRtpCapabilitiesRequest = async (jsonMessage) => {\n  const { routerRtpCapabilities, sessionId } = jsonMessage;\n  console.log('handleRouterRtpCapabilities() [rtpCapabilities:%o]', routerRtpCapabilities);\n\n  try {\n    const device = new mediasoup.Device();\n    await device.load({ routerRtpCapabilities });\n\n    peer = new Peer(sessionId, device);\n    publish();\n  } catch (error) {\n    console.error('handleRouterRtpCapabilities() failed to init device [error:%o]', error);\n    socket.close();\n  }\n};\n\nconst publish = () => {\n  console.log('publish()');\n\n  if (!peer || !peer.device.loaded) {\n    throw new Error('Peer or device is not initialized');\n  }\n\n  socket.send(JSON.stringify({\n    action: 'create-transport',\n    sessionId: peer.sessionId\n  }));\n};\n\nconst handleCreateTransportRequest = async (jsonMessage) => {\n  console.log('handleCreateTransportRequest() [data:%o]', jsonMessage);\n\n  try {\n    peer.sendTransport = await peer.device.createSendTransport(jsonMessage);\n    console.log('handleCreateTransportRequest() send transport created [id:%s]', peer.sendTransport.id);\n\n    handleSendTransportListeners();\n    getMediaStream();\n  } catch (error) {\n    console.error('handleCreateTransportRequest() failed to create transport [error:%o]', error);\n    socket.close();\n  }\n};\n\nconst handleConnectTransportRequest = async (jsonMessage) => {\n  console.log('handleTransportConnectRequest()');\n  try {\n    const action = queue.get('connect-transport');\n\n    if (!action) {\n      throw new Error('transport-connect action was not found');\n    }\n\n    console.log('action', action);\n    await action(jsonMessage);\n  } catch (error) {\n    console.error('handleTransportConnectRequest() failed [error:%o]', error);\n  }\n};\n\nconst handleProduceRequest = async (jsonMessage) => {\n  console.log('handleProduceRequest()');\n  try {\n    const action = queue.get('produce');\n\n    if (!action) {\n      throw new Error('produce action was not found');\n    }\n\n    await action(jsonMessage);\n  } catch (error) {\n    console.error('handleProduceRequest() failed [error:%o]', error);\n  }\n};\n\nconst getMediaStream = async () => {\n  const mediaStream = await GUM();\n  const videoNode = document.getElementById('localVideo');\n  videoNode.srcObject = mediaStream;\n\n  const videoTrack = mediaStream.getVideoTracks()[0];\n  const audioTrack = mediaStream.getAudioTracks()[0];\n\n  if (videoTrack) {\n    const videoProducer = await peer.sendTransport.produce({ track: videoTrack });\n    peer.producers.push(videoProducer);\n  }\n\n  if (audioTrack) {\n    const audioProducer = await peer.sendTransport.produce({ track: audioTrack });\n    peer.producers.push(audioProducer);\n  }\n\n  document.getElementById('startRecordButton').disabled = false;\n};\n\nconst handleSendTransportListeners = () => {\n  peer.sendTransport.on('connect', handleTransportConnectEvent);\n  peer.sendTransport.on('produce', handleTransportProduceEvent);\n  peer.sendTransport.on('connectionstatechange', connectionState => {\n    console.log('send transport connection state change [state:%s]', connectionState);\n  });\n};\n\nconst handleTransportConnectEvent = ({ dtlsParameters }, callback, errback) => {\n  console.log('handleTransportConnectEvent()');\n  try {\n    const action = (jsonMessage) => {\n      console.log('connect-transport action');\n      callback();\n    };\n\n    queue.push('connect-transport', action);\n\n    socket.send(JSON.stringify({\n      action: 'connect-transport',\n      sessionId: peer.sessionId,\n      transportId: peer.sendTransport.id, \n      dtlsParameters\n    }));\n  } catch (error) {\n    console.error('handleTransportConnectEvent() failed [error:%o]', error);\n    errback(error);\n  }\n};\n\nconst handleTransportProduceEvent = ({ kind, rtpParameters }, callback, errback) => {\n  console.log('handleTransportProduceEvent()');\n  try {\n    const action = jsonMessage => {\n      console.log('handleTransportProduceEvent callback [data:%o]', jsonMessage);\n      callback({ id: jsonMessage.id });\n\n      if (peer.hasVideo() && peer.hasAudio()) {\n        console.log('audio video got');\n      }\n    };\n\n    queue.push('produce', action);\n\n    socket.send(JSON.stringify({\n      action: 'produce',\n      sessionId: peer.sessionId,\n      transportId: peer.sendTransport.id,\n      kind,\n      rtpParameters\n    }));\n  } catch (error) {\n    console.error('handleTransportProduceEvent() failed [error:%o]', error);\n    errback(error);\n  }\n};\n\nsocket.addEventListener('open', handleSocketOpen);\nsocket.addEventListener('message', handleSocketMessage);\nsocket.addEventListener('error', handleSocketError);\nsocket.addEventListener('close', handleSocketClose);\n\nmodule.exports.startRecord = () => {\n  console.log('startRecord()');\n\n  socket.send(JSON.stringify({\n    action: 'start-record',\n    sessionId: peer.sessionId,\n  }));\n\n  document.getElementById('startRecordButton').disabled = true;\n  document.getElementById('stopRecordButton').disabled = false;\n};\n\nmodule.exports.stopRecord = () => {\n  console.log('stopRecord()');\n\n  socket.send(JSON.stringify({\n    action: 'stop-record',\n    sessionId: peer.sessionId\n  }));\n\n  document.getElementById('startRecordButton').disabled = false;\n  document.getElementById('stopRecordButton').disabled = true;\n};\n\n\n//# sourceURL=webpack://Lib/./src/index.js?");

/***/ }),

/***/ "./src/peer.js":
/*!*********************!*\
  !*** ./src/peer.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = class Peer {\n  constructor (sessionId, device) {\n    this.sessionId = sessionId;\n    this.device = device;\n    this.producers = [];\n\n    this.mediaStream = new MediaStream();\n    this.sendTransport = undefined;\n  }\n\n  hasVideo () {\n    return Boolean(this.producers.find((producer => producer.kind === 'video')));\n  }\n\n  hasAudio () {\n    return Boolean(this.producers.find((producer => producer.kind === 'audio')));\n  }\n}\n\n\n//# sourceURL=webpack://Lib/./src/peer.js?");

/***/ }),

/***/ "./src/queue.js":
/*!**********************!*\
  !*** ./src/queue.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = class SocketQueue {\n  constructor () {\n    this.queue = new Map();\n  }\n\n  push (action, callback) {\n    this.queue.set(action, callback);\n  }\n\n  get (action) {\n    return this.queue.get(action);\n  }\n\n  remove (action) {\n    this.queue.remove(action);\n  }\n}\n\n\n//# sourceURL=webpack://Lib/./src/queue.js?");

/***/ })

/******/ });